<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=utf-8">
<meta name=Generator content="Microsoft Word 11 (filtered)">
<title>Basics of SIMD Programming</title>
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:"ＭＳ 明朝";
	panose-1:2 2 6 9 4 2 5 8 3 4;}
@font-face
	{font-family:"ＭＳ ゴシック";
	panose-1:2 11 6 9 7 2 5 8 2 4;}
@font-face
	{font-family:Century;
	panose-1:2 4 6 4 5 5 5 2 3 4;}
@font-face
	{font-family:"ＭＳ Ｐゴシック";
	panose-1:2 11 6 0 7 2 5 8 2 4;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
@font-face
	{font-family:"¥@ＭＳ ゴシック";
	panose-1:2 11 6 9 7 2 5 8 2 4;}
@font-face
	{font-family:"¥@ＭＳ Ｐゴシック";
	panose-1:2 11 6 0 7 2 5 8 2 4;}
@font-face
	{font-family:"¥@ＭＳ 明朝";
	panose-1:2 2 6 9 4 2 5 8 3 4;}
@font-face
	{font-family:"EHJAP H+ Helvetica";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"¥@EHJAP H+ Helvetica";}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0mm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	font-size:10.5pt;
	font-family:Century;}
h1
	{margin-top:0mm;
	margin-right:0mm;
	margin-bottom:0mm;
	margin-left:21.25pt;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	text-indent:-21.25pt;
	page-break-after:avoid;
	font-size:12.0pt;
	font-family:Arial;
	font-weight:bold;}
h2
	{margin-top:0mm;
	margin-right:0mm;
	margin-bottom:0mm;
	margin-left:49.6pt;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	text-indent:-10.0mm;
	page-break-after:avoid;
	font-size:10.5pt;
	font-family:Arial;
	font-weight:normal;}
h3
	{margin-top:0mm;
	margin-right:0mm;
	margin-bottom:0mm;
	margin-left:70.9pt;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	text-indent:-10.0mm;
	page-break-after:avoid;
	font-size:10.5pt;
	font-family:Arial;
	font-weight:normal;}
h4
	{margin-top:0mm;
	margin-right:0mm;
	margin-bottom:0mm;
	margin-left:99.2pt;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	text-indent:-35.4pt;
	page-break-after:avoid;
	font-size:10.5pt;
	font-family:Century;
	font-weight:bold;}
h5
	{margin-top:0mm;
	margin-right:0mm;
	margin-bottom:0mm;
	margin-left:127.55pt;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	text-indent:-42.5pt;
	page-break-after:avoid;
	font-size:10.5pt;
	font-family:Arial;
	font-weight:normal;}
h6
	{margin-top:0mm;
	margin-right:0mm;
	margin-bottom:0mm;
	margin-left:163.0pt;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	text-indent:-20.0mm;
	page-break-after:avoid;
	font-size:10.5pt;
	font-family:Century;
	font-weight:bold;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{margin-top:0mm;
	margin-right:0mm;
	margin-bottom:0mm;
	margin-left:191.35pt;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	text-indent:-63.8pt;
	page-break-after:avoid;
	font-size:10.5pt;
	font-family:Century;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{margin-top:0mm;
	margin-right:0mm;
	margin-bottom:0mm;
	margin-left:219.7pt;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	text-indent:-70.9pt;
	page-break-after:avoid;
	font-size:10.5pt;
	font-family:Century;}
p.MsoHeading9, li.MsoHeading9, div.MsoHeading9
	{margin-top:0mm;
	margin-right:0mm;
	margin-bottom:0mm;
	margin-left:255.1pt;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	text-indent:-85.0pt;
	page-break-after:avoid;
	font-size:10.5pt;
	font-family:Century;}
p.MsoToc1, li.MsoToc1, div.MsoToc1
	{margin:0mm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	font-size:10.5pt;
	font-family:Century;}
p.MsoToc2, li.MsoToc2, div.MsoToc2
	{margin-top:0mm;
	margin-right:0mm;
	margin-bottom:0mm;
	margin-left:10.5pt;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	font-size:10.5pt;
	font-family:Century;}
p.MsoCommentText, li.MsoCommentText, div.MsoCommentText
	{margin:0mm;
	margin-bottom:.0001pt;
	font-size:10.5pt;
	font-family:Century;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0mm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	layout-grid-mode:char;
	font-size:10.5pt;
	font-family:Century;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0mm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	layout-grid-mode:char;
	font-size:10.5pt;
	font-family:Century;}
p.MsoCaption, li.MsoCaption, div.MsoCaption
	{margin:0mm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	font-size:10.5pt;
	font-family:Century;
	font-weight:bold;}
p.MsoTitle, li.MsoTitle, div.MsoTitle
	{margin-top:12.0pt;
	margin-right:0mm;
	margin-bottom:6.0pt;
	margin-left:0mm;
	text-align:center;
	font-size:16.0pt;
	font-family:Arial;}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin:0mm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	font-size:10.5pt;
	font-family:Century;}
p.MsoBodyTextIndent, li.MsoBodyTextIndent, div.MsoBodyTextIndent
	{margin-top:0mm;
	margin-right:0mm;
	margin-bottom:0mm;
	margin-left:31.5pt;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	text-indent:10.5pt;
	font-size:10.5pt;
	font-family:Arial;}
p.MsoSubtitle, li.MsoSubtitle, div.MsoSubtitle
	{margin:0mm;
	margin-bottom:.0001pt;
	text-align:center;
	font-size:12.0pt;
	font-family:Arial;}
p.MsoDate, li.MsoDate, div.MsoDate
	{margin:0mm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	font-size:10.5pt;
	font-family:Century;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;}
p.MsoDocumentMap, li.MsoDocumentMap, div.MsoDocumentMap
	{margin:0mm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	background:navy;
	font-size:10.5pt;
	font-family:Arial;}
p
	{margin-right:0mm;
	margin-left:0mm;
	font-size:12.0pt;
	font-family:"ＭＳ Ｐゴシック";}
pre
	{margin:0mm;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"ＭＳ ゴシック";}
p.MsoCommentSubject, li.MsoCommentSubject, div.MsoCommentSubject
	{margin:0mm;
	margin-bottom:.0001pt;
	font-size:10.5pt;
	font-family:Century;
	font-weight:bold;}
p.MsoAcetate, li.MsoAcetate, div.MsoAcetate
	{margin:0mm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	font-size:9.0pt;
	font-family:Arial;}
p.contentfont, li.contentfont, div.contentfont
	{margin-right:0mm;
	margin-left:0mm;
	line-height:15.0pt;
	font-size:9.0pt;
	font-family:Verdana;}
p.default, li.default, div.default
	{margin:0mm;
	margin-bottom:.0001pt;
	text-autospace:none;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;}
p.sp8266242, li.sp8266242, div.sp8266242
	{margin:0mm;
	margin-bottom:.0001pt;
	text-autospace:none;
	font-size:12.0pt;
	font-family:"EHJAP H+ Helvetica";}
p.sp8266260, li.sp8266260, div.sp8266260
	{margin:0mm;
	margin-bottom:.0001pt;
	text-autospace:none;
	font-size:12.0pt;
	font-family:"EHJAP H+ Helvetica";}
p.sp8266294, li.sp8266294, div.sp8266294
	{margin:0mm;
	margin-bottom:.0001pt;
	text-autospace:none;
	font-size:12.0pt;
	font-family:"EHJAP H+ Helvetica";}
span.sc8126981
	{font-family:"EHJAP H+ Helvetica";
	color:black;}
span.msoins0
	{color:teal;
	text-decoration:underline;}
span.msodel0
	{color:red;
	text-decoration:line-through;}
@page Section1
	{size:595.3pt 841.9pt;
	margin:42.55pt 42.55pt 42.55pt 42.55pt;
	layout-grid:14.55pt;}
div.Section1
	{page:Section1;}
-->
</style>

</head>

<body lang=JA link=blue vlink=purple style='text-justify-trim:punctuation'>

<div class=Section1 style='layout-grid:14.55pt'>

<h1><a name="_Toc151778741"></a><a name="_Toc188185527"></a><a
name="_Ref185847824"></a><a name="_Ref157409315"></a><a name="_Ref153878120"></a><a
name="_Ref153877479"></a><a name="_Ref153876742"></a><a name="_Ref153876708"></a><a
name="_Toc151197854"></a><span lang=EN-US>Chapter 2</span><span lang=EN-US
style='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US>Basics of SIMD Programming</span></h1>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>While Chapter 1
is designed to provide a general idea of Cell programming, Chapter 2 is
intended as an introduction for programmers to the use of SIMD technology, one
of the characteristic features of Cell programming. </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>Capable of
processing multiple data with a single instruction, SIMD operations are widely
used for 3D graphics and audio/video processing in multimedia applications. A
number of recently developed processors have instructions for SIMD operations
(hereinafter referred to as SIMD instructions). In multimedia extensions for
the Intel x86, for example, SSE instructions and MMX instructions are defined
as SIMD instructions. The Cell described in this tutorial includes two types of
SIMD instructions &#8211; VMX instructions implemented in the PPE and SPU SIMD
instructions implemented in SPEs.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp; </span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>In this chapter,
SIMD programming is explained using the VMX instructions implemented in the
PPE. We will look at what SIMD programming is, what data it uses and how it is
performed. A number of sample programs are presented to make it easier to
acquire necessary programming skills. Review questions are also provided at the
end of the chapter.</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>SIMD programming
on SPEs is covered in Chapter 3.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoCaption align=center style='text-align:center'><span lang=EN-US>Table
2.1: Structure of Chapter 2</span></p>

<div align=center>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 width=634
 style='width:475.6pt;margin-left:121.95pt;border-collapse:collapse'>
 <tr>
  <td width=96 valign=top style='width:72.3pt;border:solid windowtext 1.0pt;
  background:#FFFF99;padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal><span lang=EN-US>Section</span></p>
  </td>
  <td width=244 valign=top style='width:183.2pt;border:solid windowtext 1.0pt;
  border-left:none;background:#FFFF99;padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal><span lang=EN-US>Title</span></p>
  </td>
  <td width=293 valign=top style='width:220.1pt;border:solid windowtext 1.0pt;
  border-left:none;background:#FFFF99;padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal><span lang=EN-US>Description</span></p>
  </td>
 </tr>
 <tr>
  <td width=96 valign=top style='width:72.3pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal><span lang=EN-US>Section 2.1</span></p>
  </td>
  <td width=244 valign=top style='width:183.2pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal><span lang=EN-US>SIMD Operation Overview</span></p>
  </td>
  <td width=293 valign=top style='width:220.1pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>Explains
  the fundamentals of SIMD operations.</span></p>
  </td>
 </tr>
 <tr>
  <td width=96 valign=top style='width:72.3pt;border:solid windowtext 1.0pt;
  border-top:none;background:#E6E6E6;padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal><span lang=EN-US>Section 2.2</span></p>
  </td>
  <td width=244 valign=top style='width:183.2pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  background:#E6E6E6;padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal><span lang=EN-US>Data Used in SIMD Programming</span></p>
  </td>
  <td width=293 valign=top style='width:220.1pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  background:#E6E6E6;padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>Provides
  a general rundown on the data and data types used in SIMD programming.</span></p>
  </td>
 </tr>
 <tr>
  <td width=96 valign=top style='width:72.3pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal><span lang=EN-US>Section 2.3</span></p>
  </td>
  <td width=244 valign=top style='width:183.2pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal><span lang=EN-US>Rudimentary SIMD Operations</span></p>
  </td>
  <td width=293 valign=top style='width:220.1pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal><span lang=EN-US>Demonstrates basic SIMD operations.</span></p>
  </td>
 </tr>
 <tr>
  <td width=96 valign=top style='width:72.3pt;border:solid windowtext 1.0pt;
  border-top:none;background:#E6E6E6;padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal><span lang=EN-US>Section 2.4</span></p>
  </td>
  <td width=244 valign=top style='width:183.2pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  background:#E6E6E6;padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>Generation
  of SIMD-Ready Vectors</span></p>
  </td>
  <td width=293 valign=top style='width:220.1pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  background:#E6E6E6;padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>Describes
  how to organize data to make it fit SIMD operations. </span></p>
  </td>
 </tr>
 <tr>
  <td width=96 valign=top style='width:72.3pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal><span lang=EN-US>Section 2.5</span></p>
  </td>
  <td width=244 valign=top style='width:183.2pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>Elimination
  of Conditional Branches</span></p>
  </td>
  <td width=293 valign=top style='width:220.1pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal align=left style='margin-left:.75pt;text-align:left;
  text-indent:-.75pt'><span lang=EN-US>Describes how SIMD operations eliminate
  the use of conditional branches. </span></p>
  </td>
 </tr>
 <tr>
  <td width=96 valign=top style='width:72.3pt;border:solid windowtext 1.0pt;
  border-top:none;background:#E6E6E6;padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal><span lang=EN-US>Section 2.6</span></p>
  </td>
  <td width=244 valign=top style='width:183.2pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  background:#E6E6E6;padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>Exercise
  (2-1): Total Calculation Program </span></p>
  </td>
  <td width=293 valign=top style='width:220.1pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  background:#E6E6E6;padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>Provides
  a review question that can be solved based on what we will learn in Section
  2.3.</span></p>
  </td>
 </tr>
 <tr>
  <td width=96 valign=top style='width:72.3pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal><span lang=EN-US>Section 2.7</span></p>
  </td>
  <td width=244 valign=top style='width:183.2pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>Exercise
  (2-2): Floating-Point Calculation Program</span></p>
  </td>
  <td width=293 valign=top style='width:220.1pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>Provides
  a review question that can be solved based on what we will learn in Section
  2.4.</span></p>
  </td>
 </tr>
 <tr>
  <td width=96 valign=top style='width:72.3pt;border:solid windowtext 1.0pt;
  border-top:none;background:#E6E6E6;padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal><span lang=EN-US>Section 2.8</span></p>
  </td>
  <td width=244 valign=top style='width:183.2pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  background:#E6E6E6;padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>Exercise
  (2-3): Absolute Value Calculation Program</span></p>
  </td>
  <td width=293 valign=top style='width:220.1pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  background:#E6E6E6;padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>Provides
  a review question that can be solved based on what we will learn in Section
  2.5. </span></p>
  </td>
 </tr>
 <tr>
  <td width=96 valign=top style='width:72.3pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal><span lang=EN-US>Section 2.9</span></p>
  </td>
  <td width=244 valign=top style='width:183.2pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>Exercise
  (2-4): Grayscale Conversion Program</span></p>
  </td>
  <td width=293 valign=top style='width:220.1pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>As a
  comprehensive review of Chapter 2, provides a review question about color to
  grayscale conversion.</span></p>
  </td>
 </tr>
</table>

</div>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2 style='text-indent:-49.6pt'><a name="_Ref148889866"></a><a
name="_Toc188185528"></a><a name="_Toc151197855"></a><a name="_Toc151778742"></a><span
lang=EN-US>2.1</span><span lang=EN-US style='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US>SIMD Operation Overview</span></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>Let’s start with
the unique aspects of SIMD operations. SIMD is primarily geared towards graphics
applications and physics calculations that require simple, repetitive
calculations of enormous amounts of data. </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='text-indent:-70.9pt'><span lang=EN-US>2.1.1</span><span lang=EN-US
style='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp; </span><span
lang=EN-US>How SIMD Operates</span></h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>SIMD is short
for Single Instruction/Multiple Data, while the term SIMD operations refers to
a computing method that enables processing of multiple data with a single
instruction. In contrast, the conventional sequential approach using one
instruction to process each individual data is called scalar operations. </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>Using a simple
summation as an example, the difference between the scalar and SIMD operations
is illustrated below. See Fig. 2.1 for how each method handles the same four
sets of additions.</span></p>

<p class=MsoNormal align=center style='text-align:center'><span lang=EN-US><img
width=439 height=228 src="CellProgrammingTutorial.files/image008.jpg" border=0></span></p>

<p class=MsoCaption align=center style='text-align:center'><a
name="_Ref150786415"><span lang=EN-US>Fig. </span></a><span lang=EN-US>2.1:
Scalar vs. SIMD Operations</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>With
conventional scalar operations, four add instructions must be executed one
after another to obtain the sums as shown in Fig. 2.1 (a). Meanwhile, SIMD uses
only one add instruction to achieve the same result, as shown in Fig. 2.1 (b).
Requiring fewer instructions to process a given mass of data, SIMD operations
yield higher efficiency than scalar operations.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='text-indent:-70.9pt'><span lang=EN-US>2.1.2</span><span lang=EN-US
style='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp; </span><span
lang=EN-US>Restrictions on SIMD Operations</span></h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>Despite the
advantage of being able to process multiple data per instruction, SIMD
operations can only be applied to certain predefined processing patterns. Fig.
2.2 shows one such pattern where the same add operation is performed for all
data.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal align=center style='text-align:center'><span lang=EN-US><img
width=214 height=169 src="CellProgrammingTutorial.files/image009.jpg" border=0></span></p>

<p class=MsoCaption align=center style='text-align:center'><a
name="_Ref150786492"><span lang=EN-US>Fig. </span></a><span lang=EN-US>2.2:
Example of SIMD Processable Patterns</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>SIMD operations
cannot be used to process multiple data in different ways. A typical example is
given in Fig. 2.3 where some data is to be added and other data is to be
deducted, multiplied or divided.. </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal align=center style='text-align:center'><span lang=EN-US><img
width=198 height=169 src="CellProgrammingTutorial.files/image010.jpg" border=0></span></p>

<p class=MsoCaption align=center style='text-align:center'><a
name="_Ref150786260"><span lang=EN-US>Fig. </span></a><span lang=EN-US>2.3:
Example of SIMD Unprocesable Patterns</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2 style='text-indent:-49.6pt'><a name="_Ref148923109"></a><a
name="_Toc188185529"></a><a name="_Toc151197856"></a><a name="_Toc151778743"></a><a
name="_Ref150919525"></a><a name="_Ref150919518"></a><a name="_Ref150919506"></a><a
name="_Ref150919460"></a><span lang=EN-US>2.2</span><span lang=EN-US
style='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US>Data Used in SIMD Programming</span></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>This section
focuses on the data used in SIMD programming. </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='text-indent:-70.9pt'><span lang=EN-US>2.2.1</span><span lang=EN-US
style='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp; </span><span
lang=EN-US>Vector Type</span></h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>Conventional
data types used in the C programming language, such as <i>char, int </i>and<i>
float</i>, are called scalar types. Data types used for SIMD operations are
called vector types. Each vector type has its corresponding scalar type as
shown in Table 2.2.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoCaption align=center style='text-align:center'><a
name="_Ref149752309"><span lang=EN-US>Table </span></a><span lang=EN-US>2.2:
List of Vector Types</span></p>

<div align=center>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 width=496
 style='width:371.65pt;margin-left:97.4pt;border-collapse:collapse'>
 <tr style='height:3.2pt'>
  <td width=213 valign=top style='width:159.8pt;border:solid windowtext 1.0pt;
  background:#FFFF99;padding:0mm 5.4pt 0mm 5.4pt;height:3.2pt'>
  <p class=MsoNormal align=center style='text-align:center'><span lang=EN-US>Vector
  Type</span></p>
  </td>
  <td width=282 valign=top style='width:211.85pt;border:solid windowtext 1.0pt;
  border-left:none;background:#FFFF99;padding:0mm 5.4pt 0mm 5.4pt;height:3.2pt'>
  <p class=MsoNormal align=center style='text-align:center'><span lang=EN-US>Data</span></p>
  </td>
 </tr>
 <tr style='height:2.6pt'>
  <td width=213 valign=top style='width:159.8pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0mm 5.4pt 0mm 5.4pt;height:2.6pt'>
  <p class=MsoNormal align=left style='text-align:left'><i><span lang=EN-US>__vector
  unsigned char</span></i></p>
  </td>
  <td width=282 valign=top style='width:211.85pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt;height:2.6pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>Sixteen
  unsigned 8-bit data</span></p>
  </td>
 </tr>
 <tr style='height:14.5pt'>
  <td width=213 valign=top style='width:159.8pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0mm 5.4pt 0mm 5.4pt;height:14.5pt'>
  <p class=MsoNormal align=left style='text-align:left'><i><span lang=EN-US>__vector
  signed char</span></i></p>
  </td>
  <td width=282 valign=top style='width:211.85pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt;height:14.5pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>Sixteen
  signed 8-bit data</span></p>
  </td>
 </tr>
 <tr style='height:14.5pt'>
  <td width=213 valign=top style='width:159.8pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0mm 5.4pt 0mm 5.4pt;height:14.5pt'>
  <p class=MsoNormal align=left style='text-align:left'><i><span lang=EN-US>__vector
  unsigned short</span></i></p>
  </td>
  <td width=282 valign=top style='width:211.85pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt;height:14.5pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>Eight
  unsigned 16-bit data </span></p>
  </td>
 </tr>
 <tr style='height:14.5pt'>
  <td width=213 valign=top style='width:159.8pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0mm 5.4pt 0mm 5.4pt;height:14.5pt'>
  <p class=MsoNormal align=left style='text-align:left'><i><span lang=EN-US>__vector
  signed short</span></i></p>
  </td>
  <td width=282 valign=top style='width:211.85pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt;height:14.5pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>Eight
  signed 16-bit data</span></p>
  </td>
 </tr>
 <tr style='height:14.5pt'>
  <td width=213 valign=top style='width:159.8pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0mm 5.4pt 0mm 5.4pt;height:14.5pt'>
  <p class=MsoNormal align=left style='text-align:left'><i><span lang=EN-US>__vector
  unsigned int</span></i></p>
  </td>
  <td width=282 valign=top style='width:211.85pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt;height:14.5pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>Four
  unsigned 32-bit data</span></p>
  </td>
 </tr>
 <tr style='height:14.5pt'>
  <td width=213 valign=top style='width:159.8pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0mm 5.4pt 0mm 5.4pt;height:14.5pt'>
  <p class=MsoNormal align=left style='text-align:left'><i><span lang=EN-US>__vector
  signed int</span></i></p>
  </td>
  <td width=282 valign=top style='width:211.85pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt;height:14.5pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>Four
  signed 32-bit data</span></p>
  </td>
 </tr>
 <tr style='height:14.5pt'>
  <td width=213 valign=top style='width:159.8pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0mm 5.4pt 0mm 5.4pt;height:14.5pt'>
  <p class=MsoNormal align=left style='text-align:left'><i><span lang=EN-US>__vector
  unsigned long long</span></i></p>
  </td>
  <td width=282 valign=top style='width:211.85pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt;height:14.5pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>Two
  unsigned 64-bit data</span></p>
  </td>
 </tr>
 <tr style='height:14.5pt'>
  <td width=213 valign=top style='width:159.8pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0mm 5.4pt 0mm 5.4pt;height:14.5pt'>
  <p class=MsoNormal align=left style='text-align:left'><i><span lang=EN-US>__vector
  signed long long</span></i></p>
  </td>
  <td width=282 valign=top style='width:211.85pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt;height:14.5pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>Two
  signed 64-bit data</span></p>
  </td>
 </tr>
 <tr style='height:14.5pt'>
  <td width=213 valign=top style='width:159.8pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0mm 5.4pt 0mm 5.4pt;height:14.5pt'>
  <p class=MsoNormal align=left style='text-align:left'><i><span lang=EN-US>__vector
  float</span></i></p>
  </td>
  <td width=282 valign=top style='width:211.85pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt;height:14.5pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>Four
  single-precision floating-point data</span></p>
  </td>
 </tr>
 <tr style='height:3.2pt'>
  <td width=213 valign=top style='width:159.8pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0mm 5.4pt 0mm 5.4pt;height:3.2pt'>
  <p class=MsoNormal align=left style='text-align:left'><i><span lang=EN-US>__vector
  double</span></i></p>
  </td>
  <td width=282 valign=top style='width:211.85pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt;height:3.2pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>Two double-precision
  floating-point data</span></p>
  </td>
 </tr>
</table>

</div>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='text-indent:-70.9pt'><span lang=EN-US>2.2.2</span><span lang=EN-US
style='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp; </span><span
lang=EN-US>Vector Format (Byte Order*)</span></h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>The Cell uses
128-bit (16-byte) fixed-length vectors made up of 2 to 16 elements according to
the data type. A vector can be interpreted as a series of scalars of the corresponding
type (<i>char, int, float </i>and so on) in a 16-byte space. As shown in Fig.
2.4, byte ordering<sup>*</sup> and element numbering on the Cell is displayed
in big-endian order. </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoCaption align=center style='text-align:center'><span lang=EN-US><img
width=496 height=129 src="CellProgrammingTutorial.files/image011.jpg" border=0></span></p>

<p class=MsoCaption align=center style='text-align:center'><a
name="_Ref149980771"><span lang=EN-US>Fig. </span></a><span lang=EN-US>2.4:
Byte Order</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:50.0pt;text-indent:-8.0pt'><span
lang=EN-US style='font-size:8.0pt'>* Byte Ordering: Refers to sequencing
methods used when storing more than 2-byte data in computer memory. The two
main types are known as big endian and little endian. In the big endian order,
the most significant byte (MSB) is stored first, while in the little endian
order, the least significant byte (LSB) is stored first. With big endian, for
example, the 4-byte data “0x12345678” starts with 0x12 and continues through
0x34, 0x56 and 0x78. With little endian, it is recorded in reverse order, 0x78,
0x56, 0x34 and 0x12.</span></p>

<p class=MsoNormal style='margin-left:52.5pt;text-indent:-10.5pt'><span
lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:70.35pt;text-indent:-70.35pt'><span lang=EN-US>2.2.3</span><span
lang=EN-US style='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US>Vector Literal</span></h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:10.5pt;text-indent:7.35pt'><span
lang=EN-US>A vector literal is written as a parenthesized vector type followed by
a curly braced set of constant expressions. The elements of the vector are
initialized to the corresponding expression. Elements for which no expressions
are specified default to 0. Vector literals may be used either in
initialization statements or as constants in executable statements. Some
examples of usage are shown below. </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Example (2-1): Use in variable
initialization statement (Vector literal shown in <b><span style='color:red'>red</span></b>)</span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse'>
 <tr>
  <td width=693 valign=top style='width:520.1pt;border:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>void func_a(void)</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>{</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;&nbsp;&nbsp; __vector
  signed int va = <b><span style='color:red'>(__vector signed int) { -2,
  -1,&nbsp; 1,&nbsp; 2 }</span></b>;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New";color:blue'>&nbsp;</span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Example (2-2): Use as a constant in
executable statement (Vector literal shown in <b><span style='color:red'>red</span></b>)</span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse'>
 <tr>
  <td width=693 valign=top style='width:520.1pt;border:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>va = vec_add(va, <b><span
  style='color:red'>((__vector signed int) { 1, 2, 3, 4 })</span></b>);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New";color:blue'>&nbsp;</span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>When used for
macros, the entire vector literal must be enclosed in parentheses. </span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>Table 2.3
provides a list of vector literals.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoCaption align=center style='text-align:center'><a
name="_Ref149077205"><span lang=EN-US>Table </span></a><span lang=EN-US>2.3:
Vector Literals</span></p>

<div align=center>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 width=639
 style='width:479.5pt;border-collapse:collapse'>
 <tr style='height:2.6pt'>
  <td width=364 valign=top style='width:272.65pt;border:solid windowtext 1.0pt;
  background:#FFFF99;padding:0mm 5.4pt 0mm 5.4pt;height:2.6pt'>
  <p class=MsoNormal align=center style='text-align:center'><span lang=EN-US>Notation</span></p>
  </td>
  <td width=276 valign=top style='width:206.85pt;border:solid windowtext 1.0pt;
  border-left:none;background:#FFFF99;padding:0mm 5.4pt 0mm 5.4pt;height:2.6pt'>
  <p class=MsoNormal align=center style='text-align:center'><span lang=EN-US>Definition</span></p>
  </td>
 </tr>
 <tr style='height:2.6pt'>
  <td width=364 valign=top style='width:272.65pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0mm 5.4pt 0mm 5.4pt;height:2.6pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>(<i>__vector</i>
  <i>unsigned</i> <i>char</i>){ <i>unsigned</i> <i>int</i>,…}</span></p>
  </td>
  <td width=276 valign=top style='width:206.85pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt;height:2.6pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>A set
  of sixteen unsigned 8-bit data</span></p>
  </td>
 </tr>
 <tr style='height:14.5pt'>
  <td width=364 valign=top style='width:272.65pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0mm 5.4pt 0mm 5.4pt;height:14.5pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>(<i>__vector</i>
  <i>signed</i> <i>char</i>){ <i>signed</i> <i>int</i>,…}</span></p>
  </td>
  <td width=276 valign=top style='width:206.85pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt;height:14.5pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>A set
  of sixteen signed 8-bit data</span></p>
  </td>
 </tr>
 <tr style='height:14.5pt'>
  <td width=364 valign=top style='width:272.65pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0mm 5.4pt 0mm 5.4pt;height:14.5pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>(<i>__vector</i>
  <i>unsigned</i> <i>short</i>){ <i>unsigned</i> <i>short</i>,…}</span></p>
  </td>
  <td width=276 valign=top style='width:206.85pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt;height:14.5pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>A set
  of eight unsigned 16-bit data</span></p>
  </td>
 </tr>
 <tr style='height:14.5pt'>
  <td width=364 valign=top style='width:272.65pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0mm 5.4pt 0mm 5.4pt;height:14.5pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>(<i>__vector</i>
  <i>signed</i> <i>short</i>){ <i>signed</i> <i>int</i>,…}</span></p>
  </td>
  <td width=276 valign=top style='width:206.85pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt;height:14.5pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>A set
  of eight signed 16-bit data</span></p>
  </td>
 </tr>
 <tr style='height:14.5pt'>
  <td width=364 valign=top style='width:272.65pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0mm 5.4pt 0mm 5.4pt;height:14.5pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>(<i>__vector</i>
  <i>unsigned</i> <i>int</i>){ <i>unsigned</i> <i>int</i>,…}</span></p>
  </td>
  <td width=276 valign=top style='width:206.85pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt;height:14.5pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>A set
  of four unsigned 32-bit data</span></p>
  </td>
 </tr>
 <tr style='height:14.5pt'>
  <td width=364 valign=top style='width:272.65pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0mm 5.4pt 0mm 5.4pt;height:14.5pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>(<i>__vector
  signed int</i>){ <i>signed int</i>,…}</span></p>
  </td>
  <td width=276 valign=top style='width:206.85pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt;height:14.5pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>A set
  of four signed 32-bit data</span></p>
  </td>
 </tr>
 <tr style='height:14.5pt'>
  <td width=364 valign=top style='width:272.65pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0mm 5.4pt 0mm 5.4pt;height:14.5pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>(<i>__vector
  unsigned long long</i>){ <i>unsigned long long</i>,…}</span></p>
  </td>
  <td width=276 valign=top style='width:206.85pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt;height:14.5pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>A set
  of two unsigned 64-bit data</span></p>
  </td>
 </tr>
 <tr style='height:14.5pt'>
  <td width=364 valign=top style='width:272.65pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0mm 5.4pt 0mm 5.4pt;height:14.5pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>(<i>__vector
  signed long long</i>){<i> signed long long</i>,…}</span></p>
  </td>
  <td width=276 valign=top style='width:206.85pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt;height:14.5pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>A set
  of two signed 64-bit data</span></p>
  </td>
 </tr>
 <tr style='height:14.5pt'>
  <td width=364 valign=top style='width:272.65pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0mm 5.4pt 0mm 5.4pt;height:14.5pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>(<i>__vector
  float</i>){<i> float</i>,…}</span></p>
  </td>
  <td width=276 valign=top style='width:206.85pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt;height:14.5pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>A set
  of four 32-bit floating-point data</span></p>
  </td>
 </tr>
 <tr style='height:2.6pt'>
  <td width=364 valign=top style='width:272.65pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0mm 5.4pt 0mm 5.4pt;height:2.6pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>(<i>__vector
  double</i>){ <i>double</i>,…}</span></p>
  </td>
  <td width=276 valign=top style='width:206.85pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt;height:2.6pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>A set
  of two 64-bit floating-point data</span></p>
  </td>
 </tr>
</table>

</div>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='text-indent:-70.9pt'><span lang=EN-US>2.2.4</span><span lang=EN-US
style='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp; </span><span
lang=EN-US>Relationship between Vectors and Scalars</span></h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>With SIMD programming,
there often arises a need to refer to a specific vector element as a scalar or
to refer to a block of scalars as a single vector. This section describes the
referencing method to meet that need, which, for example, makes it possible to
output only the third element of a vector or to bundle scalar array input data
into vectors suitable for SIMD processing.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>Do you remember
the vector’s data structure illustrated in Fig. 2.4? Structured in the same
manner as a 16-byte array of scalars and allocated in the memory as shown in
Fig. 2.5, a vector (Fig. 2.5 (a)) can be viewed as a scalar array 16 bytes in
data length (Fig. 2.5 (b)).</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal align=center style='text-align:center'><span lang=EN-US><img
width=472 height=186 src="CellProgrammingTutorial.files/image012.jpg" border=0></span></p>

<p class=MsoCaption align=center style='text-align:center'><a
name="_Ref150202560"><span lang=EN-US>Fig. </span></a><span lang=EN-US>2.5:
Relationship between Scalar Array and Vector</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>This change in
the way of looking at data is equal to pointer casting as performed in
C-language programming. A vector can be referenced as a scalar by casting the
vector pointer to the scalar pointer. See below for a specific example. </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Example (2-3): In reference to a scalar
corresponding to the third element of a vector</span></p>

<p class=MsoNormal style='text-indent:73.5pt'><span lang=EN-US>(Pointer cast
indicated in <b><span style='color:red'>red</span></b>)</span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse'>
 <tr>
  <td width=693 valign=top style='width:520.1pt;border:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>__vector signed int va =
  (__vector signed int) { 1, 2, 3, 4 };</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><b><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New";color:red'>int *a = (int *)
  &amp;va;</span></b></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>printf(“a[2] = %d¥n”,
  a[2]);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New";color:blue'>&nbsp;</span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>Similarly, a
scalar array in the memory can be referenced as vectors. In such cases, the
scalar pointer (holding the address of the beginning of the scalar array) is
cast to the vector pointer as shown in Example (2-4).</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Example (2-4): In reference to vectors
corresponding to a specific scalar array </span></p>

<p class=MsoNormal style='text-indent:73.5pt'><span lang=EN-US>(Pointer cast
indicated in <b><span style='color:red'>red</span></b>)</span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse'>
 <tr>
  <td width=693 valign=top style='width:520.1pt;border:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>int a[8]
  __attribute__((aligned(16))) = { 1, 2, 3, 4, 5, 6, 7, 8 };</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><b><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New";color:red'>__vector signed
  int *va = (__vector signed int *) a;</span></b></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>/* va[0] = { 1, 2, 3, 4},
  va[1] = { 5, 6, 7, 8 } */</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>vb = vec_add(va[0], va[1]);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New";color:blue'>&nbsp;</span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>When referring
to scalars in an equivalent vector form, the address of the first scalar must be
aligned on a 16-byte boundary, i.e., the lower 4 bits of the address must be
all “0”. If not aligned, you may not be able to refer to vector-form data in a
way you expect. A visual representation of byte alignment is given in Fig. 2.6.</span></p>

<p class=MsoNormal align=center style='text-align:center'><span lang=EN-US><img
width=667 height=185 src="CellProgrammingTutorial.files/image013.jpg" border=0></span></p>

<p class=MsoCaption align=center style='text-align:center'><a
name="_Ref150789290"><span lang=EN-US>Fig. </span></a><span lang=EN-US>2.6:
Byte Alignment</span></p>

<p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>In Example
(2-4), the keyword </span><span lang=EN-US style='font-family:"Courier New"'>__attribute__
</span><span lang=EN-US>is used to assign the “</span><span lang=EN-US
style='font-family:"Courier New"'>aligned</span><span lang=EN-US>” attribute</span><span
lang=EN-US style='font-family:"Courier New"'> </span><span lang=EN-US>to the
scalar array <i>a</i>. The </span><span lang=EN-US style='font-family:"Courier New"'>aligned
</span><span lang=EN-US>attribute aligns data on the memory’s byte boundary. </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>This will be
discussed in more detail in Chapter 4. For now, just keep in mind that data
must be 16-byte aligned when referring to scalars as a vector.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2 style='text-indent:-49.6pt'><a name="_Ref149094143"></a><a
name="_Toc188185530"></a><a name="_Toc151197857"></a><a name="_Toc151778744"></a><span
lang=EN-US>2.3</span><span lang=EN-US style='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US>Rudimentary SIMD Operations</span></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>This section
describes SIMD operations using a summation as an example of simple arithmetic
operations. We will compare SIMD operations with scalar operations and take a
look into how data is handled, as well as how efficiently it is processed. </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:70.35pt;text-indent:-70.35pt'><span lang=EN-US>2.3.1</span><span
lang=EN-US style='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US>Program for Add Operations</span></h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>Suppose that
four add operations, each adding two numbers together, are required. </span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>In such cases,
conventional scalar processors use the program shown in List (2-1). </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>List (2-1): Scalar calculus</span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse'>
 <tr>
  <td width=693 valign=top style='width:520.1pt;border:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;1 int a[4] = { 1, 3,
  5, 7 };</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;2 int b[4] = { 2, 4,
  6, 8 };</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;3 int c[4];</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;4 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;5 c[0] = a[0] +
  b[0];&nbsp;&nbsp;&nbsp;&nbsp; // 1 + 2</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;6 c[1] = a[1] +
  b[1];&nbsp;&nbsp;&nbsp;&nbsp; // 3 + 4</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;7 c[2] = a[2] +
  b[2];&nbsp;&nbsp;&nbsp;&nbsp; // 5 + 6</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;8 c[3] = c[3] +
  c[3];&nbsp;&nbsp;&nbsp;&nbsp; // 7 + 8</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>Scalar operations
are based on a rule of “single data = single data + single data”. That is, the
four add instructions in the example must be executed in sequence as stated in
the 5<sup>th</sup> to 8<sup>th</sup> lines of the program in order to obtain
the sums for all four equations. </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>Next, let’s look
at the SIMD program for the same operations. </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>List (2-2): SIMD calculus</span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse'>
 <tr>
  <td width=693 valign=top style='width:520.1pt;border:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;1 int a[4]
  __attribute__((aligned(16))) = { 1, 3, 5, 7 };</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;2 int b[4]
  __attribute__((aligned(16))) = { 2, 4, 6, 8 };</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;3 int c[4]
  __attribute__((aligned(16)));</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;4 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;5 __vector signed int
  *va = (__vector signed int *) a;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;6 __vector signed int
  *vb = (__vector signed int *) b;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;7 __vector signed int
  *vc = (__vector signed int *) c;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;8 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;9 *vc = vec_add(*va,
  *vb);&nbsp;&nbsp;&nbsp; // 1 + 2, 3 + 4, 5 + 6, 7 + 8</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><b><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;</span></b></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>VMX provides
built-in functions for individual SIMD instructions. In the above example, <b>vec_add()
</b>in the 9<sup>th</sup> line indicates the built-in function corresponding to
the VMX add instruction. </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>SIMD operations
process data on the principle of “multiple data = multiple data + multiple
data”. This means that SIMD operations can process a greater quantity of data
per instruction than scalar operations, making it possible to reduce the number
of instructions necessary to be executed and thus the time required for processing.
</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>As explained in
Section 2.2, arrays <i>a, b </i>and<i> c </i>are referenced as vectors. To make
them 16-byte aligned, therefore, the </span><span lang=EN-US style='font-family:
"Courier New"'>aligned </span><span lang=EN-US>attribute is assigned by using
the keyword </span><span lang=EN-US style='font-family:"Courier New"'>__attribute__.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:70.35pt;text-indent:-70.35pt'><span lang=EN-US>2.3.2</span><span
lang=EN-US style='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US>Sample Program</span></h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>The following illustrates
the entire source code you need to write for the above add operations.&nbsp; </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Sample Program (2-1): Overall structure of
the program for add operations</span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse'>
 <tr>
  <td width=693 valign=top style='width:520.1pt;border:solid windowtext 1.0pt;
  background:#CCFFFF;padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;1 #include
  &lt;stdio.h&gt;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;2 #include
  &lt;altivec.h&gt;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;3 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;4 int a[4]
  __attribute__((aligned(16))) = { 1, 3, 5, 7 };</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;5 int b[4]
  __attribute__((aligned(16))) = { 2, 4, 6, 8 };</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;6 int c[4]
  __attribute__((aligned(16)));</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;7 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;8 int main(int argc,
  char **argv)</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;9 {</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>10&nbsp;&nbsp;&nbsp;&nbsp;
  __vector signed int *va = (__vector signed int *) a;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>11&nbsp;&nbsp;&nbsp;&nbsp;
  __vector signed int *vb = (__vector signed int *) b;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>12&nbsp;&nbsp;&nbsp;&nbsp;
  __vector signed int *vc = (__vector signed int *) c;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>13 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>14&nbsp;&nbsp;&nbsp;&nbsp;
  *vc = vec_add(*va, *vb);&nbsp;&nbsp;&nbsp; // 1 + 2, 3 + 4, 5 + 6, 7 + 8</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>15 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>16&nbsp;&nbsp;&nbsp;&nbsp;
  printf(&quot;c[0]=%d, c[1]=%d, c[2]=%d, c[3]=%d¥n&quot;, c[0], c[1], c[2],
  c[3]);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>17 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>18&nbsp;&nbsp;&nbsp;&nbsp;
  return 0;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>19 }</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal align=right style='text-align:right;layout-grid-mode:char;
  word-break:break-all'><span lang=EN-US><a href="src/example2_1/">Click here
  for the source code for Sample Program (2-1)</a></span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:108.0pt;text-indent:-97.3pt'><span
lang=EN-US>Line
2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Used to include the header file “</span><span lang=EN-US style='font-family:
"Courier New"'>altivec.h</span><span lang=EN-US>” necessary for utilizing VMX instructions.
The character stream “altivec” will be found not only in the header file but
also in other files as VMX instructions are grounded in the AltiVec technology.
</span></p>

<p class=MsoNormal style='margin-left:107.85pt;text-indent:-97.25pt'><span
lang=EN-US>Lines 4 </span><span style='font-family:"ＭＳ 明朝"'>〜</span><span
lang=EN-US>6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Used to define the input array data <i>a and b</i>, as well as<i> </i>the scalar
array <i>c </i>used to store the sums. Addresses of these variables are 16-byte
aligned using the </span><span lang=EN-US style='font-family:"Courier New"'>aligned
</span><span lang=EN-US>attribute</span><span lang=EN-US style='font-family:
"Courier New"'>. </span></p>

<p class=MsoNormal style='margin-left:108.0pt;text-indent:-97.3pt'><span
lang=EN-US>Lines 10 </span><span style='font-family:"ＭＳ 明朝"'>〜</span><span
lang=EN-US>12&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Used to
define the variables necessary for SIMD processing. Variables <i>va, vb </i>and<i>
vc </i>are pointers to the vector variables used in SIMD operations. They allow
scalar arrays to be referred to in the vector form.</span></p>

<p class=MsoNormal style='margin-left:108.0pt;text-indent:-97.3pt'><span
lang=EN-US>Line
14&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Used to execute the <b>vec_add() </b>function to enable add instruction
execution. This function makes it possible to add the values in the
corresponding elements of <i>va</i> and <i>vb</i> and store the results in the
elements of <i>vc</i>. </span></p>

<p class=MsoNormal style='margin-left:108.0pt;text-indent:-97.3pt'><span
lang=EN-US>Line
16&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Used to display the results on the standard output.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='text-indent:-70.9pt'><span lang=EN-US>2.3.3</span><span lang=EN-US
style='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp; </span><span
lang=EN-US>Program Compiling and Execution</span></h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>To compile the
program, use the </span><b><span lang=EN-US style='font-family:Arial'>gcc</span></b><span
lang=EN-US> command. With VMX, the </span><b><span lang=EN-US style='font-family:
Arial'>-maltivec </span></b><span lang=EN-US style='font-family:Arial'>and<b>
-mabi=altivec</b></span><span lang=EN-US> compile options must also be
specified. </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Example (2-5): Program compilation </span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse'>
 <tr>
  <td width=693 valign=top style='width:520.1pt;border:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>$ gcc -maltivec
  -mabi=altivec vec_add.c -o vec_add.elf</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:5.25pt;text-indent:5.25pt'><span
lang=EN-US>Program execution by using VMX instructions is no different from the
conventional method. At the shell prompt, run the ELF executable file. </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Example (2-6): Program execution</span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse'>
 <tr>
  <td width=693 valign=top style='width:520.1pt;border:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>$ ./vec_add.elf</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>c[0]=3, c[1]=7, c[2]=11,
  c[3]=15</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>$ </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:70.35pt;text-indent:-70.35pt'><span lang=EN-US>2.3.4</span><span
lang=EN-US style='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US>Built-in Functions for VMX Instructions (Intrinsics)</span></h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>So far, the <b>vec_add()</b>
function corresponding to the VMX add instruction has been explained. A variety
of other built-in functions are also available for VMX instructions for use in
arithmetic operations, bit operations and comparison operations. Some of them
are listed in Table 2.4. </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoCaption align=center style='text-align:center'><a
name="_Ref148921172"></a><a name="_Ref157410146"></a><span lang=EN-US>Table </span><span
lang=EN-US>2.4: Built-in Functions for VMX Instructions (Representative
Examples)</span></p>

<div align=center>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 width=586
 style='width:439.55pt;margin-left:116.85pt;border-collapse:collapse'>
 <tr>
  <td width=121 valign=top style='width:90.5pt;border:solid windowtext 1.0pt;
  background:#FFFF99;padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><span lang=EN-US>Applicable
  Instructions</span></p>
  </td>
  <td width=136 valign=top style='width:102.15pt;border:solid windowtext 1.0pt;
  border-left:none;background:#FFFF99;padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><span lang=EN-US>Function
  Name</span></p>
  </td>
  <td width=329 valign=top style='width:246.9pt;border:solid windowtext 1.0pt;
  border-left:none;background:#FFFF99;padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><span lang=EN-US>Description</span></p>
  </td>
 </tr>
 <tr>
  <td width=121 rowspan=5 valign=top style='width:90.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>Arithmetic
  Instructions</span></p>
  </td>
  <td width=136 valign=top style='width:102.15pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><b><span
  lang=EN-US>vec_add(a, b)</span></b></p>
  </td>
  <td width=329 valign=top style='width:246.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>Adds
  the elements of vectors <i>a </i>and <i>b.</i></span></p>
  </td>
 </tr>
 <tr>
  <td width=136 valign=top style='width:102.15pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><b><span
  lang=EN-US>vec_sub(a, b)</span></b></p>
  </td>
  <td width=329 valign=top style='width:246.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>Performs
  subtractions between the elements of&nbsp; vectors <i>a </i>and<i> b. </i></span></p>
  </td>
 </tr>
 <tr>
  <td width=136 valign=top style='width:102.15pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><b><span
  lang=EN-US>vec_madd(a, b, c)</span></b></p>
  </td>
  <td width=329 valign=top style='width:246.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>Multiplies
  the elements of vector <i>a </i>by the elements of vector<i> b </i>and adds
  the elements of <span style='color:blue'>&nbsp;</span>vector <i>c<span
  style='color:blue'>.</span></i></span></p>
  </td>
 </tr>
 <tr>
  <td width=136 valign=top style='width:102.15pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><b><span
  lang=EN-US>vec_re(a)</span></b></p>
  </td>
  <td width=329 valign=top style='width:246.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal align=left style='margin-left:.65pt;text-align:left;
  text-indent:-.65pt'><span lang=EN-US>Calculates the reciprocals of the
  elements of&nbsp; vector <i>a.</i></span></p>
  </td>
 </tr>
 <tr>
  <td width=136 valign=top style='width:102.15pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><b><span
  lang=EN-US>vec_rsqrte(a)</span></b></p>
  </td>
  <td width=329 valign=top style='width:246.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>Calculates
  the square roots of the reciprocals of the elements of vector <i>a.</i></span></p>
  </td>
 </tr>
 <tr>
  <td width=121 rowspan=2 valign=top style='width:90.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>Logical
  Instructions</span></p>
  </td>
  <td width=136 valign=top style='width:102.15pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><b><span
  lang=EN-US>vec_and(a, b)</span></b></p>
  </td>
  <td width=329 valign=top style='width:246.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>Finds
  the bitwise logical products (AND) between vectors <i>a</i> and <i>b</i>.</span></p>
  </td>
 </tr>
 <tr style='height:3.0pt'>
  <td width=136 valign=top style='width:102.15pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt;height:3.0pt'>
  <p class=MsoNormal align=center style='text-align:center'><b><span
  lang=EN-US>vec_or(a, b)</span></b></p>
  </td>
  <td width=329 valign=top style='width:246.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt;height:3.0pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>Finds
  the bitwise logical sums (OR) between vectors <i>a</i> and <i>b</i>.</span></p>
  </td>
 </tr>
 <tr style='height:3.0pt'>
  <td width=121 rowspan=2 valign=top style='width:90.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0mm 5.4pt 0mm 5.4pt;height:3.0pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>Shift/Rotate
  Instructions</span></p>
  </td>
  <td width=136 valign=top style='width:102.15pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt;height:3.0pt'>
  <p class=MsoNormal align=center style='text-align:center'><b><span
  lang=EN-US>vec_sr(a, b)</span></b></p>
  </td>
  <td width=329 valign=top style='width:246.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt;height:3.0pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>Right-shifts
  the elements of vector <i>a</i></span></p>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>in
  accordance with the number of bits specified by the elements of vector <i>b</i>.
  </span></p>
  </td>
 </tr>
 <tr style='height:3.0pt'>
  <td width=136 valign=top style='width:102.15pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt;height:3.0pt'>
  <p class=MsoNormal align=center style='text-align:center'><b><span
  lang=EN-US>vec_rl(a, b)</span></b></p>
  </td>
  <td width=329 valign=top style='width:246.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt;height:3.0pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>Left-rotates
  the elements of vector <i>a</i></span></p>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>in
  accordance with the number of bits specified by the elements of vector<i> b</i>.</span></p>
  </td>
 </tr>
 <tr style='height:3.0pt'>
  <td width=121 rowspan=2 valign=top style='width:90.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0mm 5.4pt 0mm 5.4pt;height:3.0pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>Bit
  Operation Instructions</span></p>
  </td>
  <td width=136 valign=top style='width:102.15pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt;height:3.0pt'>
  <p class=MsoNormal align=center style='text-align:center'><b><span
  lang=EN-US>vec_perm(a, b, c)</span></b></p>
  </td>
  <td width=329 valign=top style='width:246.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt;height:3.0pt'>
  <p class=MsoNormal align=left style='margin-left:.65pt;text-align:left;
  text-indent:-.65pt'><span lang=EN-US>Realigns the elements of vectors <i>a</i>
  and <i>b</i> </span></p>
  <p class=MsoNormal align=left style='margin-left:.65pt;text-align:left;
  text-indent:-.65pt'><span lang=EN-US>so that they match the byte pattern
  specified by vector <i>c</i>.</span></p>
  </td>
 </tr>
 <tr style='height:3.0pt'>
  <td width=136 valign=top style='width:102.15pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt;height:3.0pt'>
  <p class=MsoNormal align=center style='text-align:center'><b><span
  lang=EN-US>vec_sel(a, b, c)</span></b></p>
  </td>
  <td width=329 valign=top style='width:246.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt;height:3.0pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>Selects
  the bits in vectors <i>a</i> and <i>b</i> according to the bit pattern
  specified by vector <i>c</i>.</span></p>
  </td>
 </tr>
 <tr>
  <td width=121 rowspan=2 valign=top style='width:90.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>Compare
  Instructions</span></p>
  </td>
  <td width=136 valign=top style='width:102.15pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><b><span
  lang=EN-US>vec_cmpeq(a, b)</span></b></p>
  </td>
  <td width=329 valign=top style='width:246.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal align=left style='margin-left:.65pt;text-align:left;
  text-indent:-.65pt'><span lang=EN-US>Compares if the elements of vector <i>a</i>
  are equal to the elements of vector <i>b</i>.&nbsp; </span></p>
  </td>
 </tr>
 <tr>
  <td width=136 valign=top style='width:102.15pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><b><span
  lang=EN-US>vec_cmpgt(a, b)</span></b></p>
  </td>
  <td width=329 valign=top style='width:246.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>Checks
  if the elements of vector <i>a </i>are numerically greater than those of
  vector <i>b</i>. </span></p>
  </td>
 </tr>
 <tr>
  <td width=121 rowspan=2 valign=top style='width:90.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>Conversion
  Instructions</span></p>
  </td>
  <td width=136 valign=top style='width:102.15pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><b><span
  lang=EN-US>vec_ctf(a, b)</span></b></p>
  </td>
  <td width=329 valign=top style='width:246.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>Divides
  the elements of integer vector <i>a</i> by 2<i><sup>b </sup></i>and converts
  them into floating-point values.</span></p>
  </td>
 </tr>
 <tr>
  <td width=136 valign=top style='width:102.15pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><b><span
  lang=EN-US>vec_ctu(a, b)</span></b></p>
  </td>
  <td width=329 valign=top style='width:246.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>Multiplies
  the elements of floating-point vector <i>a</i> by 2<i><sup>b </sup></i>and
  converts them into unsigned integers. </span></p>
  </td>
 </tr>
 <tr>
  <td width=121 rowspan=2 valign=top style='width:90.5pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>Constant
  Generation Instructions</span></p>
  </td>
  <td width=136 valign=top style='width:102.15pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><b><span
  lang=EN-US>vec_splat(a, b)</span></b></p>
  </td>
  <td width=329 valign=top style='width:246.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal align=left style='margin-left:.65pt;text-align:left;
  text-indent:-.65pt'><span lang=EN-US>Generates a new vector by expanding the <i>b<sup>th</sup>
  </i>element of vector <i>a</i>. </span></p>
  </td>
 </tr>
 <tr>
  <td width=136 valign=top style='width:102.15pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><b><span
  lang=EN-US>vec_splat_s32(a)</span></b></p>
  </td>
  <td width=329 valign=top style='width:246.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>Generates
  a new vector by expanding the scalar literal <i>a</i> into four signed 32-bit
  equivalent data. </span></p>
  </td>
 </tr>
</table>

</div>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:70.35pt;text-indent:-70.35pt'><span lang=EN-US>2.3.5</span><span
lang=EN-US style='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US>Reference Document</span></h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>Table 2.4 shows
typical VMX intrinsic functions only. If you need more information, please
refer to Chapter 4 of Freescale Semiconductor’s “AltiVec Technology Programming
Interface Manual”.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>(<a
href="http://www.freescale.com/files/32bit/doc/ref_manual/ALTIVECPIM.pdf?srch=1">http://www.freescale.com/files/32bit/doc/ref_manual/ALTIVECPIM.pdf?srch=1</a>)</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2 style='text-indent:-49.6pt'><a name="_Toc148010397"></a><a
name="_Toc188185531"></a><a name="_Toc151197858"></a><a name="_Toc151778745"></a><a
name="_Ref149404228"></a><a name="_Ref149404178"></a><a name="_Toc148010740"></a><span
lang=EN-US>2.4</span><span lang=EN-US style='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US>Generation of SIMD-Ready Vectors</span></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:5.25pt;text-indent:5.25pt'><span
lang=EN-US>SIMD operations almost always use scalar arrays as input data.
However, the data structure of these arrays is not always suited for SIMD
operations. That’s why this section has been provided to explain how to change
such inputs into SIMD-ready vectors. </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:70.35pt;text-indent:-70.35pt'><span lang=EN-US>2.4.1</span><span
lang=EN-US style='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US>Need for Data Realignment</span></h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>Typical examples
of data that may not be suitable for SIMD operations include color data of
images and 3-dimensional data for 3D graphics. Take, for example, the case of
computing the brightness Y of each pixel from its RGB values. The formula used
for this calculation is as follows. </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal align=center style='text-align:center'><span lang=EN-US>(Brightness
calculation formula)&nbsp;&nbsp;&nbsp; Y = R x 0.29891 + G x 0.58661 + B x
0.11448</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"ＭＳ 明朝"'>　</span><span lang=EN-US>SIMD
calculation of brightness using this formula requires the use of data grouped
into R, G and B vectors as illustrated in Fig. 2.7. </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal align=center style='text-align:center'><span lang=EN-US><img
border=0 width=390 height=169 src="CellProgrammingTutorial.files/image014.jpg"></span></p>

<p class=MsoCaption align=center style='text-align:center'><a
name="_Ref150008387"><span lang=EN-US>Fig. </span></a><span lang=EN-US>2.7:
Brightness Computation by SIMD Operations</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>Most often,
however, color data read out from an image file is configured in RGB units as
shown in Fig. 2.7 (a) and thus is not appropriate for SIMD operations. It must
be realigned into vectors as shown in Fig. 2.8 (b).</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal align=center style='text-align:center'><span lang=EN-US><img
border=0 width=502 height=204 src="CellProgrammingTutorial.files/image015.jpg"></span></p>

<p class=MsoCaption align=center style='text-align:center'><a
name="_Ref150006022"><span lang=EN-US>Fig. </span></a><span lang=EN-US>2.8:
Realignment of RGB Data</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:70.35pt;text-indent:-70.35pt'><span lang=EN-US>2.4.2</span><span
lang=EN-US style='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US>Vector Realignment Mechanism</span></h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>Now then, let’s
examine how realignment can actually be performed. With SIMD operations, the
built-in function <b>vec_perm() </b>is used for this purpose. Using three arguments
&#8211; two vectors to be realigned plus a realignment pattern, this function
generates a new vector and returns it as the function value.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Example (2-7): Description of the <b>vec_perm()
</b>function </span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse'>
 <tr>
  <td width=693 valign=top style='width:520.1pt;border:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>vc = vec_perm(va, vb,
  vpat);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>For the first
and second arguments <i>va</i> and <i>vb</i>, specify the vectors subject to
realignment. For the third argument <i>vpat</i>, specify the realignment
pattern. Each byte in the realignment pattern represents the element number
when the two vectors are assumed to be linked together to form a single 32-byte
array. Fig. 2.9 depicts an image of processing using the <b>vec_perm()</b>
function. </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal align=center style='text-align:center'><span lang=EN-US><img
border=0 width=680 height=279 src="CellProgrammingTutorial.files/image016.jpg"></span></p>

<p class=MsoCaption align=center style='text-align:center'><a
name="_Ref150012955"><span lang=EN-US>Fig. </span></a><span lang=EN-US>2.9:
Processing by vec_perm Function (Image)</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:70.35pt;text-indent:-70.35pt'><span lang=EN-US>2.4.3</span><span
lang=EN-US style='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US>Program for Matrix Transposition</span></h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>An example of
obtaining a transposed matrix is shown below. </span></p>

<p class=MsoNormal><span lang=EN-US style='color:black'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US
style='color:black'>Matrix <i>A</i> comprised of m rows by n columns can be
transposed to another matrix comprised of n rows by m columns by interchanging
the elements <i>A<sub>ij</sub> </i>and <i>A<sub>ji</sub></i> of the matrix <i>A</i>.
The n-by-m matrix produced in this way is described as <i>A<sup>T</sup></i>. It
is used mainly for coordinate transformations in 3D graphics processing.</span></p>

<p class=MsoNormal><span lang=EN-US style='color:black'>&nbsp;</span></p>

<p class=MsoNormal align=center style='text-align:center'><span lang=EN-US><img
border=0 width=614 height=218 src="CellProgrammingTutorial.files/image017.jpg"></span></p>

<p class=MsoCaption align=center style='text-align:center'><a
name="_Ref150786654"><span lang=EN-US>Fig. </span></a><span lang=EN-US>2.10:
Matrix Transposition</span></p>

<p class=MsoNormal><span lang=EN-US style='color:black'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US
style='color:black'>The following demonstrates how to transpose the 4x4 matrix
shown in </span><span lang=EN-US>Fig. 2.10<span style='color:black'>, using the
</span><b>vec_perm() </b>function<b>. </b></span></p>

<p class=MsoNormal><span lang=EN-US style='color:black'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:black'>List (2-3): Program to
transpose a 4x4 matrix </span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse'>
 <tr>
  <td width=693 valign=top style='width:520.1pt;border:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;1 int a[16]&nbsp;
  __attribute__((aligned(16))) = {&nbsp; 1,&nbsp; 2,&nbsp; 3,&nbsp; 4,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  5,&nbsp; 6,&nbsp; 7,&nbsp; 8,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  9, 10, 11, 12,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  13, 14, 15, 16 };</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;5 int aT[16]
  __attribute__((aligned(16)));</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;6 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;7 __vector signed int
  *va&nbsp; = (__vector signed int *) a;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;8 __vector signed int
  *vaT = (__vector signed int *) aT;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;9 __vector signed int
  vtmp[4];</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>10 __vector unsigned char
  vpat1 = (__vector unsigned char) { 0x00, 0x01, 0x02, 0x03,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>11
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0x04,
  0x05, 0x06, 0x07,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>12&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  0x10, 0x11, 0x12, 0x13,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>13&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  0x14, 0x15, 0x16, 0x17 };</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>14 __vector unsigned char
  vpat2 = (__vector unsigned char) { 0x08, 0x09, 0x0a, 0x0b,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>15&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  0x0c, 0x0d, 0x0e, 0x0f,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>16&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  0x18, 0x19, 0x1a, 0x1b,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>17
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0x1c,
  0x1d, 0x1e, 0x1f };</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>18 __vector unsigned char
  vpat3 = (__vector unsigned char) { 0x00, 0x01, 0x02, 0x03,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>19&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  0x10, 0x11, 0x12, 0x13,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>20&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  0x08, 0x09, 0x0a, 0x0b,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>21&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  0x18, 0x19, 0x1a, 0x1b };</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>22 __vector unsigned char
  vpat4 = (__vector unsigned char) { 0x04, 0x05, 0x06, 0x07,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>23&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  0x14, 0x15, 0x16, 0x17,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>24&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  0x0c, 0x0d, 0x0e, 0x0f,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>25&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  0x1c, 0x1d, 0x1e, 0x1f };</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>26 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>27 vtmp[0] =
  vec_perm(va[0], va[2], vpat1);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>28 vtmp[1] =
  vec_perm(va[1], va[3], vpat1);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>29 vtmp[2] =
  vec_perm(va[0], va[2], vpat2);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>30 vtmp[3] =
  vec_perm(va[1], va[3], vpat2);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>31 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>32 vaT[0] =
  vec_perm(vtmp[0], vtmp[1], vpat3);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>33 vaT[1] =
  vec_perm(vtmp[0], vtmp[1], vpat4);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>34 vaT[2] =
  vec_perm(vtmp[2], vtmp[3], vpat3);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>35 vaT[3] =
  vec_perm(vtmp[2], vtmp[3], vpat4);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:5.25pt;text-indent:5.25pt'><span
lang=EN-US style='color:black'>This example uses four vector variables per
matrix because each element of the matrix is 4 bytes long. Also, the transpose
of vector variables takes place in two steps as shown in </span><span
lang=EN-US>Fig. 2.11<span style='color:black'> because only two variables can
be interchanged</span> per the execution o<span style='color:black'>f the <b>vec_perm()</b>
function, making it necessary to repeat the same operation a total of eight
times to turn all rows into columns.</span></span></p>

<p class=MsoNormal align=center style='text-align:center'><span lang=EN-US><img
border=0 width=690 height=244 src="CellProgrammingTutorial.files/image018.jpg"></span></p>

<p class=MsoCaption align=center style='text-align:center'><a
name="_Ref148942643"><span lang=EN-US>Fig. </span></a><span lang=EN-US>2.11:
Two-Tiered Transpose Operation </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:70.35pt;text-indent:-70.35pt'><span lang=EN-US>2.4.4</span><span
lang=EN-US style='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US>Sample Program</span></h3>

<p class=MsoNormal><span lang=EN-US style='color:black'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>The following
shows the entire source code you need to write for the above transpose program.
</span></p>

<p class=MsoNormal align=left style='text-align:left'><span lang=EN-US
style='color:black'>&nbsp;</span></p>

<p class=MsoNormal align=left style='text-align:left'><span lang=EN-US
style='color:black'>Sample Program (2-2): Matrix transpose program</span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse'>
 <tr>
  <td width=693 valign=top style='width:520.1pt;border:solid windowtext 1.0pt;
  background:#CCFFFF;padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;1 #include
  &lt;stdio.h&gt;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;2 #include
  &lt;altivec.h&gt;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;3 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;4 int
  a[16]&nbsp; __attribute__((aligned(16))) = {&nbsp; 1,&nbsp; 2,&nbsp; 3,&nbsp;
  4,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  5,&nbsp; 6,&nbsp; 7,&nbsp; 8,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  9, 10, 11, 12,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;7&nbsp;&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;13,
  14, 15, 16 };</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;8 int
  aT[16] __attribute__((aligned(16)));</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;9 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>10 void print_matrix(int
  *matrix)</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>11 {</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>12&nbsp;&nbsp;&nbsp;&nbsp;
  int i, j;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>13 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>14&nbsp;&nbsp;&nbsp;&nbsp;
  for (i = 0; i &lt; 4; i++) {</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>15&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  for (j = 0; j &lt; 4; j++) {</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>16&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  printf(&quot;%2d &quot;, matrix[i * 4 + j]);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>17&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  }</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>18&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  printf(&quot;¥n&quot;);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>19&nbsp;&nbsp;&nbsp;&nbsp;
  }</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>20&nbsp;&nbsp;&nbsp;&nbsp;
  return;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>21 }</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>22 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>23 int main(int argc, char
  **argv)</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>24 {</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>25&nbsp;&nbsp;&nbsp;&nbsp;
  __vector signed int *va&nbsp; = (__vector signed int *) a;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>26&nbsp;&nbsp;&nbsp;&nbsp;
  __vector signed int *vaT = (__vector signed int *) aT;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>27&nbsp;&nbsp;&nbsp;&nbsp;
  __vector signed int vtmp[4];</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>28&nbsp;&nbsp;&nbsp;&nbsp;
  __vector unsigned char vpat1 = (__vector unsigned char) { 0x00, 0x01, 0x02,
  0x03,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>29&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  0x04, 0x05, 0x06, 0x07,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>30&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0x10,
  0x11, 0x12, 0x13,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>31&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  0x14, 0x15, 0x16, 0x17 };</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>32&nbsp;&nbsp;&nbsp;&nbsp;
  __vector unsigned char vpat2 = (__vector unsigned char) { 0x08, 0x09, 0x0a,
  0x0b,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>33&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0x0c,
  0x0d, 0x0e, 0x0f,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>34&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  0x18, 0x19, 0x1a, 0x1b,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>35&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  0x1c, 0x1d, 0x1e, 0x1f };</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>36&nbsp;&nbsp;&nbsp;
  &nbsp;__vector unsigned char vpat3 = (__vector unsigned char) { 0x00, 0x01,
  0x02, 0x03,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>37&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  0x10, 0x11, 0x12, 0x13,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>38&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  0x08, 0x09, 0x0a, 0x0b,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>39&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  0x18, 0x19, 0x1a, 0x1b };</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>40&nbsp;&nbsp;&nbsp;&nbsp;
  __vector unsigned char vpat4 = (__vector unsigned char) { 0x04, 0x05, 0x06,
  0x07,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>41&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  0x14, 0x15, 0x16, 0x17,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>42&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  0x0c, 0x0d, 0x0e, 0x0f,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>43&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  0x1c, 0x1d, 0x1e, 0x1f };</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>44 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>45&nbsp;&nbsp;&nbsp;&nbsp;
  printf(&quot;--- original matrix ---¥n&quot;);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>46&nbsp;&nbsp;&nbsp;&nbsp;
  print_matrix(a);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>47 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>48&nbsp;&nbsp;&nbsp;&nbsp;
  /* vec_perm() part 1 */</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>49&nbsp;&nbsp;&nbsp;&nbsp;
  vtmp[0] = vec_perm(va[0], va[2], vpat1);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>50&nbsp;&nbsp;&nbsp;&nbsp;
  vtmp[1] = vec_perm(va[1], va[3], vpat1);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>51&nbsp;&nbsp;&nbsp;&nbsp;
  vtmp[2] = vec_perm(va[0], va[2], vpat2);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>52&nbsp;&nbsp;&nbsp;&nbsp;
  vtmp[3] = vec_perm(va[1], va[3], vpat2);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>53 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>54&nbsp;&nbsp;&nbsp;&nbsp;
  printf(&quot;--- transform 1 ---¥n&quot;);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>55&nbsp;&nbsp;&nbsp;&nbsp;
  print_matrix((int *) vtmp);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>56 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>57&nbsp;&nbsp;&nbsp;&nbsp;
  /* vec_perm() part 2 */</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>58&nbsp;&nbsp;&nbsp;&nbsp;
  vaT[0] = vec_perm(vtmp[0], vtmp[1], vpat3);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>59&nbsp;&nbsp;&nbsp;&nbsp;
  vaT[1] = vec_perm(vtmp[0], vtmp[1], vpat4);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>60&nbsp;&nbsp;&nbsp;&nbsp;
  vaT[2] = vec_perm(vtmp[2], vtmp[3], vpat3);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>61&nbsp;
  &nbsp;&nbsp;&nbsp;vaT[3] = vec_perm(vtmp[2], vtmp[3], vpat4);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>62 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>63&nbsp;&nbsp;&nbsp;&nbsp;
  printf(&quot;--- transform 2 ---¥n&quot;);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>64&nbsp;&nbsp;&nbsp;&nbsp;
  print_matrix(aT);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>65 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>66&nbsp;&nbsp;&nbsp;&nbsp;
  return 0;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>67 }</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal align=right style='text-align:right;layout-grid-mode:char'><span
  lang=EN-US><a href="src/example2_2/">Click here for the source code for
  Sample Program (2-2)</a></span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=EN-US style='color:red'>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:107.85pt;text-indent:-97.25pt'><span
lang=EN-US>Lines 4</span><span style='font-family:"ＭＳ 明朝"'>〜</span><span
lang=EN-US>8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Used to define the matrix <i>a</i> and the transposed matrix <i>aT</i> in terms
of scalar arrays.</span></p>

<p class=MsoNormal style='margin-left:108.0pt;text-indent:-97.3pt'><span
lang=EN-US>Lines 10</span><span style='font-family:"ＭＳ 明朝"'>〜</span><span
lang=EN-US>21&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Used
to define the function for outputting the matrix to the standard output.</span></p>

<p class=MsoNormal style='margin-left:108.0pt;text-indent:-97.3pt'><span
lang=EN-US>Lines 25</span><span style='font-family:"ＭＳ 明朝"'>〜</span><span
lang=EN-US>27&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Used
to define the variables necessary for SIMD operations. Variables <i>va </i>and<i>
vaT </i>are pointers to the vector variables used in SIMD operations. These
variables allow referencing to scalar arrays in the vector form. The vector
variable array <i>vtmp</i> needs to be defined to retain the interim result
during the two-step realignment operations of vector variables. </span></p>

<p class=MsoNormal style='margin-left:108.0pt;text-indent:-97.3pt'><span
lang=EN-US>Lines 28</span><span style='font-family:"ＭＳ 明朝"'>〜</span><span
lang=EN-US>43&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Used
to define the vector variable realignment pattern for the transpose. The first
step realignment uses <i>vpat1 </i>and<i> vpat2, </i>while the second,<i> vpat3
</i>and<i> vpat4.</i></span></p>

<p class=MsoNormal style='margin-left:108.0pt;text-indent:-97.3pt'><span
lang=EN-US>Lines 45</span><span style='font-family:"ＭＳ 明朝"'>〜</span><span
lang=EN-US>46&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Used
to output the content of the matrix <i>a</i> to the standard output.</span></p>

<p class=MsoNormal style='margin-left:108.0pt;text-indent:-97.3pt'><span
lang=EN-US>Lines 49</span><span style='font-family:"ＭＳ 明朝"'>〜</span><span
lang=EN-US>55&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Used
to execute the first-step realignment operation, as well as to output the
interim result <i>vtmp</i> to the standard output.</span></p>

<p class=MsoNormal style='margin-left:108.0pt;text-indent:-97.3pt'><span
lang=EN-US>Lines 58</span><span style='font-family:"ＭＳ 明朝"'>〜</span><span
lang=EN-US>64&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Used
to execute the second-step realignment operation, as well as to output the
transposed matrix <i>aT </i>to the standard output.</span></p>

<p class=MsoNormal><span lang=EN-US style='color:red'>&nbsp;</span></p>

<h2 style='text-indent:-49.6pt'><a name="_Ref151197997"></a><a
name="_Toc188185532"></a><a name="_Toc151197859"></a><a name="_Toc151778746"></a><a
name="_Ref151198169"></a><a name="_Ref151198160"></a><a name="_Ref151198151"></a><a
name="_Ref151198097"></a><a name="_Ref151198009"></a><span lang=EN-US>2.5</span><span
lang=EN-US style='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US>Elimination of Conditional Branch</span><span
lang=EN-US>es</span></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>With scalar
operations, a conditional branch is used to alter the processing flow when a
specified condition is met. The use of branch instructions, however, affects
the efficiency of SIMD operations because it requires decomposing each vector
into elements and processing them sequentially. SIMD processors therefore
employ another method to obtain the same result as conditional branching. </span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:70.35pt;text-indent:-70.35pt'><span lang=EN-US>2.5.1</span><span
lang=EN-US style='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US>Branch-Equivalent SIMD Processing&nbsp; </span></h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>When different
operations have to be performed according to set conditions, scalar processors
first evaluate the given condition as shown in Fig. 2.12 (a) and take the
appropriate branch according to the result of the evaluation. SIMD processors
provide the equivalent of this operation, while maintaining their primary
efficiency, by following the sequence described in Fig. 2.12 (b). </span></p>

<p class=MsoNormal align=center style='text-align:center'><span lang=EN-US><img
border=0 width=411 height=437 src="CellProgrammingTutorial.files/image019.jpg"></span></p>

<p class=MsoCaption align=center style='text-align:center'><a
name="_Ref150227355"><span lang=EN-US>Fig. </span></a><span lang=EN-US>2.12:
Conditional Branch Processing Flows</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:10.5pt'><span
lang=EN-US>Here are the details of the procedure illustrated in Fig. 2.12 (b).</span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:10.5pt'><span
lang=EN-US>To begin with, an authenticity check is performed as shown in Fig.
2.13 to determine if the condition holds true or not.</span></p>

<p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal align=center style='text-align:center'><span lang=EN-US><img
border=0 width=251 height=220 src="CellProgrammingTutorial.files/image020.jpg"></span></p>

<p class=MsoCaption align=center style='text-align:center'><a
name="_Ref150227834"><span lang=EN-US>Fig. </span></a><span lang=EN-US>2.13:
Condition Evaluation</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:10.5pt'><span
lang=EN-US>Next, calculations are executed for both true and false condition
cases as shown in Fig. 2.14. </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal align=center style='text-align:center'><span lang=EN-US><img
border=0 width=502 height=220 src="CellProgrammingTutorial.files/image021.jpg"></span></p>

<p class=MsoCaption align=center style='text-align:center'><a
name="_Ref151173100"><span lang=EN-US>Fig. </span></a><span lang=EN-US>2.14:
Condition-Based Dual Calculations</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>Of the two
outcomes obtained per vector element, the one that conforms to the result of
the condition evaluation is selected and stored. This selective storing of the
outcome is performed for all vector elements, simultaneously by a single
operation, as shown in Fig. 2.15.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal align=center style='text-align:center'><span lang=EN-US><img
border=0 width=324 height=175 src="CellProgrammingTutorial.files/image022.jpg"></span></p>

<p class=MsoCaption align=center style='text-align:center'><a
name="_Ref150228273"><span lang=EN-US>Fig. </span></a><span lang=EN-US>2.15:
Selection of Processed Results</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>In sum, SIMD
operations provide the same result as forming a conditional branch by selecting
between the outcomes of calculations performed for both true and false
condition states.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:70.35pt;text-indent:-70.35pt'><span lang=EN-US>2.5.2</span><span
lang=EN-US style='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US>Comparison and Selection</span></h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>Now then, let’s
proceed to the exact method of eliminating conditional branching. </span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>SIMD operations
eliminate conditional branching by using a compare instruction and a bit select
instruction. More specifically, a built-in function corresponding to the compare
instruction of, for example, the <b>vec_cmpgt() </b>function is used for
condition evaluation in the beginning. For processed result selection, the <b>vec_sel()
</b>function related to the bit select instruction is used. </span></p>

<p class=MsoNormal><b><span lang=EN-US>&nbsp;</span></b></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>After comparing
the element of the first argument <i>va</i> with the corresponding element of
the second argument <i>vb, </i>the <b>vec_cmpgt()</b> function generates and
returns a new vector with all bits of the corresponding element set to “1”(if
the element of <i>va</i> is numerically greater than that of <i>vb</i>)or to
“0” (otherwise).&nbsp; </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Example (2-8): Description of the <b>vec_cmpgt()
</b>function</span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse'>
 <tr>
  <td width=693 valign=top style='width:520.1pt;border:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>vpat = vec_cmpgt(va, vb);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>Fig. 2.16
depicts an image of processing performed by the <b>vec_cmpgt()</b> function.</span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:10.5pt'><span
lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal align=center style='text-align:center'><span lang=EN-US><img
border=0 width=520 height=146 src="CellProgrammingTutorial.files/image023.jpg">&nbsp;</span></p>

<p class=MsoCaption align=center style='text-align:center'><a
name="_Ref150232095"><span lang=EN-US>Fig. </span></a><span lang=EN-US>2.16:
Processing by vec_cmpgt() Function (Image)</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>The<b> vec_sel()</b>
function generates and returns a vector based on the 128-bit selection pattern
specified by the third argument <i>vpat</i>. This function selects the bits of
the first argument <i>va</i> if the <i>vpat</i> bits are all “0”.
Alternatively, it selects the bits of the second argument <i>vb</i> if the <i>vpat</i>
bits are all “1”.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Example (2-9): Description of the <b>vec_sel()</b>
function</span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse'>
 <tr>
  <td width=693 valign=top style='width:520.1pt;border:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>vc = vec_sel(va, vb, vpat);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>Fig. 2.17
provides an overall picture of the operations performed by the use of the <b>vec_cmpgt()</b>
and <b>vec_sel()</b> functions.</span></p>

<p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal align=center style='text-align:center'><span lang=EN-US><img
border=0 width=520 height=192 src="CellProgrammingTutorial.files/image024.jpg"></span></p>

<p class=MsoCaption align=center style='text-align:center'><a
name="_Ref150068372"><span lang=EN-US>Fig. </span></a><span lang=EN-US>2.17:
Processing by vec_cmpgt() and vec_sel() Functions (Image)</span></p>

<p class=MsoNormal><span lang=EN-US style='color:red'>&nbsp;</span></p>

<h3 style='margin-left:70.35pt;text-indent:-70.35pt'><span lang=EN-US>2.5.3</span><span
lang=EN-US style='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US>Program for Absolute Difference Computation</span></h3>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>Shown below is
the sample program for calculating the absolute value of the difference between
the values of two elements, taken to review the conditional branching described
heretofore in Section 5. </span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>List (2-4): Scalar program for difference
calculation</span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse'>
 <tr>
  <td width=693 valign=top style='width:520.1pt;border:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;1 int a[16] = {&nbsp;
  1,&nbsp; 2,&nbsp; 3,&nbsp; 4,&nbsp; 5,&nbsp; 6,&nbsp; 7,&nbsp; 8,&nbsp; 9,
  10, 11, 12, 13, 14, 15, 16 };</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;2 int b[16] = { 16,
  15, 14, 13, 12, 11, 10,&nbsp; 9,&nbsp; 8,&nbsp; 7,&nbsp; 6,&nbsp; 5,&nbsp;
  4,&nbsp; 3,&nbsp; 2,&nbsp; 1 };</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;3 int c[16];</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;4 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;5 int i;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;6 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;7 for (i = 0; i &lt;
  16; i++) {</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;
  if (a[i] &gt; b[i]) {</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;9&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  c[i] = a[i] - b[i];</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>10&nbsp;&nbsp;&nbsp;&nbsp;
  } else {</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>11&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  c[i] = b[i] - a[i];</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>12&nbsp;&nbsp;&nbsp;&nbsp;
  }</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>13 }</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt'>&nbsp;</span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US
style='color:black'>This program repeats comparisons between the elements of
scalar arrays <i>a </i>and <i>b</i>.</span><span lang=EN-US style='font-family:
"Courier New";color:black'> </span><span lang=EN-US style='color:black'>With
each comparison made, <i>b[i] </i>is subtracted from <i>a[i]</i> if the element
of the array <i>a </i>is numerically greater than that of the array<i> b</i>.
For a set of <i>a</i> and <i>b</i> elements in reverse relationship, <i>a[i] </i>is
subtracted from <i>b[i].</i> A conditional branch is used every time a
subtraction is performed. </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>The SIMD program
applicable to the same purpose is as follows. The program uses the function <b>vec_cmpgt()</b>
for comparisons of values.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>List (2-5): SIMD program for difference
calculation</span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse'>
 <tr>
  <td width=693 valign=top style='width:520.1pt;border:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;1 int a[16]
  __attribute__((aligned(16))) = {&nbsp; 1,&nbsp; 2,&nbsp; 3,&nbsp; 4,&nbsp;
  5,&nbsp; 6,&nbsp; 7,&nbsp; 8,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  9, 10, 11, 12, 13, 14, 15, 16 };</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;3 int b[16]
  __attribute__((aligned(16))) = { 16, 15, 14, 13, 12, 11, 10,&nbsp; 9,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8,&nbsp;
  7,&nbsp; 6,&nbsp; 5,&nbsp; 4,&nbsp; 3,&nbsp; 2,&nbsp; 1 };</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;5 int c[16]
  __attribute__((aligned(16)));</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;6 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;7 __vector signed int
  *va = (__vector signed int *) a;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;8 __vector signed int
  *vb = (__vector signed int *) b;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;9 __vector signed int
  *vc = (__vector signed int *) c;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>10 __vector signed int
  vc_true, vc_false;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>11 __vector unsigned int
  vpat;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>12 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>13 for (i = 0; i &lt; 4;
  i++) {</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>14&nbsp;&nbsp;&nbsp;&nbsp;
  vpat = vec_cmpgt(va[i], vb[i]);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>15&nbsp;&nbsp;&nbsp;&nbsp;
  vc_true&nbsp; = vec_sub(va[i], vb[i]);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>16&nbsp;&nbsp;&nbsp;&nbsp;
  vc_false = vec_sub(vb[i], va[i]);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>17&nbsp;&nbsp;&nbsp;&nbsp;
  vc[i] = vec_sel(vc_false, vc_true, vpat);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>18 }</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>Unlike scalar
operations, conditional branching is unnecessary. Instead, all four element
values are compared simultaneously, with subtractions performed for both true
and false condition states. Then one of the two difference values obtained for
each element, which is compliant with the result of condition evaluation, is
selected and stored in the vector variable <i>vc</i>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:70.35pt;text-indent:-70.35pt'><span lang=EN-US>2.5.4</span><span
lang=EN-US style='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US>Sample Program</span></h3>

<p class=MsoNormal><span lang=EN-US style='color:red'>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>The following
shows the entire source code you need to write for the SIMD program explained
in Section 2.5.3. </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Sample Program (2-3): Overall structure of
the program for difference calculation</span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse'>
 <tr>
  <td width=693 valign=top style='width:520.1pt;border:solid windowtext 1.0pt;
  background:#CCFFFF;padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;1 #include
  &lt;stdio.h&gt;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;2 #include
  &lt;altivec.h&gt;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;3 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;4 int
  a[16] __attribute__((aligned(16))) = {&nbsp; 1,&nbsp; 2,&nbsp; 3,&nbsp;
  4,&nbsp; 5,&nbsp; 6,&nbsp; 7,&nbsp; 8,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  9, 10, 11, 12, 13, 14, 15, 16 };</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;6 int
  b[16] __attribute__((aligned(16))) = { 16, 15, 14, 13, 12, 11, 10,&nbsp; 9,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  8,&nbsp; 7,&nbsp; 6,&nbsp; 5,&nbsp; 4,&nbsp; 3,&nbsp; 2,&nbsp; 1 };</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;8 int
  c[16] __attribute__((aligned(16)));</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;9 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>10 int main(int argc, char
  **argv)</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>11 {</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>12&nbsp;&nbsp;&nbsp;&nbsp;
  __vector signed int *va = (__vector signed int *) a;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>13&nbsp;&nbsp;&nbsp;&nbsp;
  __vector signed int *vb = (__vector signed int *) b;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>14&nbsp;&nbsp;&nbsp;&nbsp;
  __vector signed int *vc = (__vector signed int *) c;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>15&nbsp;
  &nbsp;&nbsp;&nbsp;__vector signed int vc_true, vc_false;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>16&nbsp;&nbsp;&nbsp;&nbsp;
  __vector unsigned int vpat;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>17 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>18&nbsp;&nbsp;&nbsp;&nbsp;
  int i;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>19 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>20&nbsp;&nbsp;&nbsp;&nbsp;
  for (i = 0; i &lt; 4; i++) {</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>21&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  vpat = vec_cmpgt(va[i], vb[i]);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>22&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  vc_true&nbsp; = vec_sub(va[i], vb[i]);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>23&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  vc_false = vec_sub(vb[i], va[i]);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>24&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  vc[i] = vec_sel(vc_false, vc_true, vpat);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char;background:#99CCFF'><span
  lang=EN-US style='font-size:9.0pt;font-family:"Courier New"'>25&nbsp;&nbsp;&nbsp;&nbsp;
  }</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>26 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>27&nbsp;&nbsp;&nbsp;&nbsp;
  for (i = 0; i &lt; 16; i++) {</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>28&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  printf(&quot;c[%02d]=%2d¥n&quot;, i, c[i]);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>29&nbsp;&nbsp;&nbsp;&nbsp;
  }</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>30 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>31&nbsp;&nbsp;&nbsp;&nbsp;
  return 0;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>32 }</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal align=right style='text-align:right;layout-grid-mode:char;
  word-break:break-all'><span lang=EN-US><a href="src/example2_3/">Click here for
  the source code for Sample Program (2-3)</a></span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=EN-US style='color:red'>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:107.85pt;text-indent:-97.25pt'><span
lang=EN-US>Lines 4</span><span style='font-family:"ＭＳ 明朝"'>〜</span><span
lang=EN-US>8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Used to define the input array data <i>a</i> and <i>b</i>, plus the scalar
array<i> c</i> for storing the derived difference values. </span></p>

<p class=MsoNormal style='margin-left:107.85pt;text-indent:-97.25pt'><span
lang=EN-US>Lines 12</span><span style='font-family:"ＭＳ 明朝"'>〜</span><span
lang=EN-US>16&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Used
to define the variables necessary for SIMD operations. Variables <i>va, vb </i>and<i>
vc</i> are pointers to the vector variables used in SIMD operations. These
variables allow referencing to scalar arrays in an equivalent vector form. </span></p>

<p class=MsoNormal style='margin-left:107.85pt;text-indent:-97.25pt'><span
lang=EN-US>Lines 20</span><span style='font-family:"ＭＳ 明朝"'>〜</span><span
lang=EN-US>25&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The </span><span
lang=EN-US style='font-family:"Courier New"'>for</span><span lang=EN-US> loop
performs numeric comparison between the elements of <i>va</i> and <i>vb</i>, as
well as difference calculations for both true and false conditions, and stores
the results in variables <i>vc_true </i>and <i>vc_false</i>. The <b>vec_sel()</b>
function allows selection from these difference values for storage in the
variable <i>vc. </i></span></p>

<p class=MsoNormal style='margin-left:108.0pt;text-indent:-97.3pt'><span
lang=EN-US>Lines 27</span><span style='font-family:"ＭＳ 明朝"'>〜</span><span
lang=EN-US>29&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Used
to output the difference values to the standard output. </span></p>

<p class=MsoNormal><span lang=EN-US style='color:red'>&nbsp;</span></p>

<h2 style='text-indent:-49.6pt'><a name="_Toc148010399"></a><a
name="_Toc151197860"></a><a name="_Toc151778747"></a><a name="_Ref149404238"></a><a
name="_Ref149404192"></a><a name="_Toc188185533"></a><a name="_Toc148010742"></a><span
lang=EN-US>2.6</span><span lang=EN-US style='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US>Exercise </span><span lang=EN-US>(2-1): Total
Calculation Program </span></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>Here is a review
question about what we’ve learned in Section 2.3.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse'>
 <tr>
  <td width=693 valign=top style='width:520.1pt;border:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal><span style='font-family:"ＭＳ 明朝"'>【</span><span
  lang=EN-US>Question</span><span style='font-family:"ＭＳ 明朝"'>】</span></p>
  <p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>Practice
  Program (2-1) is a program for finding the sum total of 1 to 1024.</span></p>
  <p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>Rewrite this
  program so that it can perform SIMD operations.</span></p>
  <p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>
  <p class=MsoNormal align=left style='text-align:left;text-indent:10.5pt'><span
  lang=EN-US>The program uses the </span><span lang=EN-US style='font-family:
  "Courier New"'>for</span><span lang=EN-US> statement to add individual
  numbers to the variable <i>sum</i>, while incrementing the <i>int</i>
  variable <i>i</i>. </span></p>
  <p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse'>
 <tr>
  <td width=693 valign=top style='width:520.1pt;border:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal><span style='font-family:"ＭＳ 明朝"'>【</span><span
  lang=EN-US>Practice Program(2-1)</span><span style='font-family:"ＭＳ 明朝"'>】</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;1 #include
  &lt;stdio.h&gt;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;2 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;3 #define MAX_NUM
  (1024)</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;4 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;5 int main(int argc,
  char **argv)</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;6 {</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;
  int i;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;
  int sum = 0;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;9 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>10&nbsp;&nbsp;&nbsp;&nbsp;
  for (i = 1; i &lt;= MAX_NUM; i++) {</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>11&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  sum += i;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>12&nbsp;&nbsp;&nbsp;&nbsp;
  }</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>13 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>14&nbsp;&nbsp;&nbsp;&nbsp;
  printf(&quot;sum: %d¥n&quot;, sum);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>15 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>16&nbsp;&nbsp;&nbsp;&nbsp;
  return 0;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>17 }</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal align=right style='text-align:right;layout-grid-mode:char;
  word-break:break-all'><span lang=EN-US><a href="src/practice2_1_q/">Click
  here for the source code for Practice Program (2-1)</a></span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse'>
 <tr>
  <td width=693 valign=top style='width:520.1pt;border:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal><span style='font-family:"ＭＳ 明朝"'>【</span><span
  lang=EN-US>Strategy to Obtain the Answer</span><span style='font-family:"ＭＳ 明朝"'>】</span></p>
  <p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>The focus of
  discussion here is on how to divide the data and how to process it with SIMD
  operations. </span></p>
  <p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>Since the data
  type is <i>int</i>, SIMD operations can handle four values at a time.
  Accordingly, divide the data (numbers from 1 to 1024) into four segments,
  calculate the partial sums for these segments and add the four partial sums
  together at the end.</span></p>
  <p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>Follow the
  steps below to work out the solution program. </span></p>
  <p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>
  <p class=MsoNormal style='margin-left:54.0pt;text-indent:-54.0pt'><span
  lang=EN-US>(1)</span><span lang=EN-US style='font-size:7.0pt;font-family:
  "Times New Roman"'>&nbsp;&nbsp; </span><span lang=EN-US>Perform a four-way
  data split and use SIMD operations to calculate four partial sums. </span></p>
  <p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>
  <p class=MsoNormal align=center style='text-align:center;page-break-after:
  avoid'><span lang=EN-US><img border=0 width=574 height=188
  src="CellProgrammingTutorial.files/image025.jpg"></span></p>
  <p class=MsoCaption align=center style='text-align:center'><span lang=EN-US>Fig.
  2.18: Partial Sum Calculation</span></p>
  <p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>
  <p class=MsoNormal style='margin-left:54.0pt;text-indent:-54.0pt'><span
  lang=EN-US>(2)</span><span lang=EN-US style='font-size:7.0pt;font-family:
  "Times New Roman"'>&nbsp;&nbsp; </span><span lang=EN-US>Calculate the total
  sum value, making reference to the four partial sums in the scalar form. </span></p>
  <p class=MsoNormal style='margin-left:36.0pt;text-indent:17.95pt'><span
  lang=EN-US>Pointer-cast as described in Section 2.2 to refer to the partial
  sums. </span></p>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>&nbsp;</span></p>
  <p class=MsoNormal align=center style='text-align:center;page-break-after:
  avoid'><span lang=EN-US><img border=0 width=385 height=125
  src="CellProgrammingTutorial.files/image026.jpg"></span></p>
  <p class=MsoCaption align=center style='text-align:center'><span lang=EN-US>Fig.
  2.19: Totaling Partial Sums</span></p>
  <p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>A model solution
is provided below, together with brief explanations of the program and the
source code. </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse'>
 <tr>
  <td width=693 valign=top style='width:520.1pt;border:solid windowtext 1.0pt;
  background:#CCFFFF;padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal style='layout-grid-mode:char'><span style='font-family:
  "ＭＳ 明朝"'>【</span><span lang=EN-US>Solution Program (2-1)</span><span
  style='font-family:"ＭＳ 明朝"'>】</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;1 #include
  &lt;stdio.h&gt;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;2 #include
  &lt;altivec.h&gt;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;3 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;4 #define MAX_NUM
  (1024)</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;5 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;6 int main(int argc, char
  **argv)</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;7 {</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;
  int i;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;9&nbsp;&nbsp;&nbsp;&nbsp;
  int sum;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>10&nbsp;&nbsp;&nbsp;&nbsp;
  int *psum;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>11 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>12&nbsp;&nbsp;&nbsp;&nbsp;
  __vector signed int va&nbsp;&nbsp;&nbsp; = (__vector signed int) { 1, 2, 3, 4
  };</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>13&nbsp;&nbsp;&nbsp;&nbsp;
  __vector signed int vsum&nbsp; = (__vector signed int) { 0, 0, 0, 0 };</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>14 &nbsp;&nbsp;&nbsp;&nbsp;__vector
  signed int vstep = (__vector signed int) { 4, 4, 4, 4 };</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>15 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>16&nbsp;&nbsp;&nbsp;&nbsp;
  for (i = 1; i &lt;= MAX_NUM; i += 4) {</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>17&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  vsum = vec_add(vsum, va);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>18&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  va&nbsp;&nbsp; = vec_add(va, vstep);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>19&nbsp;&nbsp;&nbsp;&nbsp;
  }</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>20 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>21&nbsp;&nbsp;&nbsp;&nbsp;
  psum = (int *) &amp;vsum;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>22&nbsp;&nbsp;&nbsp;&nbsp;
  sum&nbsp; = psum[0] + psum[1] + psum[2] + psum[3];</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>23 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>24&nbsp;&nbsp;&nbsp;&nbsp;
  printf(&quot;sum: %d¥n&quot;, sum);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>25 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>26&nbsp;&nbsp;&nbsp;&nbsp;
  return 0;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>27 }</span></p>
  <p class=MsoNormal align=right style='text-align:right;layout-grid-mode:char;
  word-break:break-all'><span lang=EN-US>&nbsp;</span></p>
  <p class=MsoNormal align=right style='text-align:right;layout-grid-mode:char'><span
  lang=EN-US><a href="src/practice2_1_a/">Click here for the source code for
  Solution Program (2-1)</a></span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>&nbsp;</span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse'>
 <tr>
  <td width=693 valign=top style='width:520.1pt;border:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal><span style='font-family:"ＭＳ 明朝"'>【</span><span
  lang=EN-US>Program Description</span><span style='font-family:"ＭＳ 明朝"'>】</span></p>
  <p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>This program
  is one of the applied examples of Sample Program (2-1). To calculate partial
  sums, it makes use of the <b>vec_add()</b> function that sequentially adds
  the vector variable <i>va</i> to the vector variable <i>vsum. </i>The vector
  variable <i>va </i>is initialized with { 1, 2, 3, 4 } and incremented by 4
  using the vector variable <i>vstep</i> on each iteration. </span></p>
  <p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>
  <p class=MsoNormal align=center style='text-align:center;page-break-after:
  avoid'><span lang=EN-US><img border=0 width=574 height=188
  src="CellProgrammingTutorial.files/image027.jpg"></span></p>
  <p class=MsoCaption align=center style='text-align:center'><span lang=EN-US>Fig.
  2.20: SIMD Partial Sum Computation</span></p>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>Upon completion
  of partial sum calculations, perform a pointer cast so that the vector
  variable <i>vsum</i> containing the partial sum data can be interpreted as
  the scalar array <i>psum, </i>making it possible to obtain the inclusive sum
  by totaling the elements of this array</span></p>
  <p class=MsoNormal align=center style='text-align:center;page-break-after:
  avoid'><span lang=EN-US><img border=0 width=357 height=137
  src="CellProgrammingTutorial.files/image028.jpg"></span></p>
  <p class=MsoCaption align=center style='text-align:center'><span lang=EN-US>Fig.
  2.21: Adding Partial Sums (Pointer Cast)</span></p>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>The source
  code included in the above solution program is as follows. </span></p>
  <p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>
  <p class=MsoNormal style='margin-left:108.0pt;text-indent:-97.3pt'><span
  lang=EN-US>Lines 12</span><span style='font-family:"ＭＳ 明朝"'>〜</span><span
  lang=EN-US>14&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  Used to furnish vector variables <i>va, vsum </i>and<i> vstep.</i> In the
  practice program, the scalar variable<i> i </i>functions both as a counter
  and data. In the solution program, however, it assumes the role of the
  counter only.&nbsp; </span></p>
  <p class=MsoNormal style='margin-left:108.0pt;text-indent:-97.3pt'><span
  lang=EN-US>Line
  17&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  Using the <b>vec_add()</b> function, calculates the sum value <i>vsum</i>.</span></p>
  <p class=MsoNormal style='margin-left:108.0pt;text-indent:-97.3pt'><span
  lang=EN-US>Line
  18&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  Using the <b>vec_add()</b> function, increments <i>va</i> for the equivalent
  of <i>vstep</i>.</span></p>
  <p class=MsoNormal style='margin-left:108.0pt;text-indent:-97.3pt'><span
  lang=EN-US>Lines 21</span><span style='font-family:"ＭＳ 明朝"'>〜</span><span
  lang=EN-US>22&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  Allow calculation of the inclusive sum by making it possible to refer to
  scalars corresponding to the elements of the vector stored in the variable <i>vsum</i>.</span></p>
  <p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<span lang=EN-US style='font-size:10.5pt;font-family:Century'><br clear=all
style='page-break-before:always'>
</span>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2 style='text-indent:-49.6pt'><a name="_Toc148010400"></a><a
name="_Toc188185534"></a><a name="_Toc151778748"></a><a name="_Ref149404243"></a><a
name="_Ref149404200"></a><a name="_Toc151197861"></a><a name="_Toc148010743"></a><span
lang=EN-US>2.7</span><span lang=EN-US style='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US>Exercise </span><a name="_Toc148010401"></a><a
name="_Toc148010744"></a><span lang=EN-US>(2-2): Floating-Point Calculation
Program</span></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>Here is a review
question about what we’ve learned in Section 2.4.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse'>
 <tr>
  <td width=693 valign=top style='width:520.1pt;border:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal><span style='font-family:"ＭＳ 明朝"'>【</span><span
  lang=EN-US>Question</span><span style='font-family:"ＭＳ 明朝"'>】</span></p>
  <p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>Practice
  Program (2-2) is a program for multiplying integers 1 to 16 individually by
  0.1. </span></p>
  <p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>Rewrite this
  program so that it can perform SIMD operations.</span></p>
  <p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>Integer values
  1 to 16 in this program are given in the form of the scalar <i>unsigned short</i>
  array <i>in</i>. The result of floating-point calculations is stored in the
  scalar <i>float</i> array <i>out</i>.</span></p>
  <p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 width=693
 style='width:520.1pt;border-collapse:collapse'>
 <tr>
  <td width=693 valign=top style='width:520.1pt;border:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal><span style='font-family:"ＭＳ 明朝"'>【</span><span
  lang=EN-US>Practice Program (2-2)</span><span style='font-family:"ＭＳ 明朝"'>】</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;1 #include
  &lt;stdio.h&gt;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;2 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;3 #define
  SIZE&nbsp;&nbsp;&nbsp; (16)</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;4 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;5 unsigned short
  in[SIZE] = {&nbsp; 1,&nbsp; 2,&nbsp; 3,&nbsp; 4,&nbsp; 5,&nbsp; 6,&nbsp;
  7,&nbsp; 8,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  9, 10, 11, 12, 13, 14, 15, 16 };</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;7
  float&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; out[SIZE];</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;8 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;9 int main(int argc,
  char **argv)</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>10 {</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>11&nbsp;&nbsp;&nbsp;&nbsp;
  int i;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>12 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>13&nbsp;&nbsp;&nbsp;&nbsp;
  for (i = 0; i &lt; SIZE; i++) {</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>14&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  out[i] = (float) in[i] * 0.1f;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>15&nbsp;&nbsp;&nbsp;&nbsp;
  }</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>16 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>17&nbsp;&nbsp;&nbsp;&nbsp;
  for (i = 0; i &lt; SIZE; i++) {</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>18&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  printf(&quot;out[%02d]=%0.1f¥n&quot;, i, out[i]);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>19&nbsp;&nbsp;&nbsp;&nbsp;
  }</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>20 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>21&nbsp;&nbsp;&nbsp;&nbsp;
  return 0;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>22 }</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal align=right style='text-align:right;layout-grid-mode:char;
  word-break:break-all'><span lang=EN-US><a href="src/practice2_2_q/">Click
  here for the source code for Practice Program (2-2)</a></span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse'>
 <tr>
  <td width=693 valign=top style='width:520.1pt;border:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal><span style='font-family:"ＭＳ 明朝"'>【</span><span
  lang=EN-US>Strategy to Obtain the Answer</span><span style='font-family:"ＭＳ 明朝"'>】</span></p>
  <p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>The biggest challenge
  here is how to change the vector data type by SIMD operations. The given
  data, which is <i>unsigned short, </i>must be converted into <i>float</i>
  data to allow floating-point calculations. With SIMD operations, this is
  performed by the use of the <b>vec_ctf()</b> function.</span></p>
  <p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>The use of the
  <b>vec_ctf() </b>function, however, gives rise to a need for another data
  type conversion. Since this function can take arguments in the form of 32-bit
  <i>unsigned int </i>vectors only, conversion from 16-bit <i>unsigned short</i>
  to 32-bit <i>unsigned int </i>data also becomes necessary. With SIMD
  operations, the <i>unsigned short </i>to <i>unsigned int</i> conversion is
  executed based on the vector realignment mechanism explained in Section 2.4.</span></p>
  <p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>
  <p class=MsoNormal align=center style='text-align:center;page-break-after:
  avoid'><span lang=EN-US><img border=0 width=614 height=182
  src="CellProgrammingTutorial.files/image029.jpg"></span></p>
  <p class=MsoCaption align=center style='text-align:center'><span lang=EN-US>Fig.
  2.22:&nbsp; <i>unsigned short </i>to<i> float </i>Conversion</span></p>
  <p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>A model solution
is provided below, together with brief explanations of the program and the
source code. </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse'>
 <tr>
  <td width=693 valign=top style='width:520.1pt;border:solid windowtext 1.0pt;
  background:#CCFFFF;padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal style='layout-grid-mode:char'><span style='font-family:
  "ＭＳ 明朝"'>【</span><span lang=EN-US>Solution Program (2-2)</span><span
  style='font-family:"ＭＳ 明朝"'>】</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;1 #include
  &lt;stdio.h&gt;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;2 #include
  &lt;altivec.h&gt;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;3 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;4 #define
  SIZE&nbsp;&nbsp;&nbsp; (16)</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;5 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;6 unsigned short
  in[SIZE] __attribute__((aligned(16))) = {&nbsp; 1,&nbsp; 2,&nbsp; 3,&nbsp;
  4,&nbsp; 5,&nbsp; 6,&nbsp; 7,&nbsp; 8,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  9, 10, 11, 12, 13, 14, 15, 16 };</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;8
  float&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; out[SIZE]
  __attribute__((aligned(16)));</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;9 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>10 int main(int argc, char
  **argv)</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>11 {</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>12&nbsp;&nbsp;&nbsp;&nbsp;
  int i;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>13 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>14&nbsp;&nbsp;&nbsp;&nbsp;
  __vector unsigned short *vin = (__vector unsigned short *) in;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>15&nbsp;&nbsp;&nbsp;&nbsp;
  __vector float *vout = (__vector float *) out;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>16&nbsp;&nbsp;&nbsp;&nbsp;
  __vector unsigned char vpat1 = (__vector unsigned char) { 0x10, 0x10, 0x00,
  0x01,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>17&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  0x10, 0x10, 0x02, 0x03,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>18&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  0x10, 0x10, 0x04, 0x05,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>19&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0x10,
  0x10, 0x06, 0x07 };</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>20&nbsp;&nbsp;&nbsp;&nbsp;
  __vector unsigned char vpat2 = (__vector unsigned char) { 0x10, 0x10, 0x08,
  0x09,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>21&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  0x10, 0x10, 0x0a, 0x0b,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>22&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0x10,
  0x10, 0x0c, 0x0d,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>23&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  0x10, 0x10, 0x0e, 0x0f };</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>24&nbsp;&nbsp;&nbsp;&nbsp;
  __vector unsigned int vtmp;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>25&nbsp;&nbsp;&nbsp;&nbsp;
  __vector float vftmp;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>26&nbsp;&nbsp;&nbsp;&nbsp;
  __vector unsigned short vzero = (__vector unsigned short) { 0, 0, 0, 0, 0, 0,
  0, 0 };</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>27&nbsp;&nbsp;&nbsp;&nbsp;
  __vector float vfzero = (__vector float) { 0.0f, 0.0f, 0.0f, 0.0f };</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>28&nbsp;&nbsp;&nbsp;&nbsp;
  __vector float vtenth = (__vector float) { 0.1f, 0.1f, 0.1f, 0.1f };</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>29 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>30&nbsp;&nbsp;&nbsp;&nbsp;
  for (i = 0; i &lt; SIZE/8; i++) {</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>31&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  vtmp = vec_perm(vin[i], vzero, vpat1);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  vftmp = vec_ctf(vtmp, 0);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>33&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  vout[i*2] = vec_madd(vftmp, vtenth, vfzero);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>34 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>35&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  vtmp = vec_perm(vin[i], vzero, vpat2);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>36&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  vftmp = vec_ctf(vtmp, 0);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>37&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  vout[i*2+1] = vec_madd(vftmp, vtenth, vfzero);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>38&nbsp;&nbsp;&nbsp;&nbsp;
  }</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>39 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>40&nbsp;&nbsp;&nbsp;&nbsp;
  for (i = 0; i &lt; SIZE; i++) {</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>41&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  printf(&quot;out[%02d]=%0.1f¥n&quot;, i, out[i]);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>42&nbsp;&nbsp;&nbsp;&nbsp;
  }</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>43 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>44&nbsp;&nbsp;&nbsp;&nbsp;
  return 0;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>45 }</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal align=right style='text-align:right;layout-grid-mode:char;
  word-break:break-all'><span lang=EN-US><a href="src/practice2_2_a/">Click
  here for the source code for Solution Program (2-2)</a></span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 width=693
 style='width:520.1pt;border-collapse:collapse'>
 <tr>
  <td width=693 valign=top style='width:520.1pt;border:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal><span style='font-family:"ＭＳ 明朝"'>【</span><span
  lang=EN-US>Program Description</span><span style='font-family:"ＭＳ 明朝"'>】</span></p>
  <p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>This sample is
  included to familiarize you with the generation of convenient-to-handle
  vectors. Using the <b>vec_perm() </b>function, convert <i>__vector unsigned
  short</i> data composed of eight elements into a pair of <i>__vector unsigned
  int</i> data, each comprised of four elements. As the Cell uses the big
  endian byte order, elements of an <i>unsigned short</i> array are stored to the
  higher two bytes with higher addresses of each <i>__vector unsigned int</i>
  element. The remaining two bytes at the lower addresses should be padded with
  “0”, as shown in Fig. 2.23. </span></p>
  <p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>The<i> </i><b>vec_ctf()
  </b>function enables conversion from <i>__vector unsigned int </i>integers to
  <i>__vector float </i>floating-point values. </span></p>
  <p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>
  <p class=MsoNormal align=center style='text-align:center;page-break-after:
  avoid'><span lang=EN-US><img border=0 width=623 height=185
  src="CellProgrammingTutorial.files/image030.jpg"></span></p>
  <p class=MsoCaption align=center style='text-align:center'><a
  name="_Ref152749555"></a><a name="_Ref152749518"></a><span lang=EN-US>Fig. </span><span
  lang=EN-US>2.23: Conversion into Floating-Point Data by SIMD Operations</span></p>
  <p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>The source
  code included in the above solution program is as follows.</span></p>
  <p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>
  <p class=MsoNormal style='margin-left:107.85pt;text-indent:-97.25pt'><span
  lang=EN-US>Lines 14</span><span style='font-family:"ＭＳ 明朝"'>〜</span><span
  lang=EN-US>15&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  Used to enable scalar to vector pointer cast, making it possible to refer to
  scalar&nbsp; arrays <i>in</i> and <i>out </i>in an equivalent vector form. </span></p>
  <p class=MsoNormal style='margin-left:108.0pt;text-indent:-97.3pt'><span
  lang=EN-US>Lines 16</span><span style='font-family:"ＭＳ 明朝"'>〜</span><span
  lang=EN-US>23&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  Used to generate realignment patterns <i>vpat1 </i>and <i>vpat2</i> necessary
  for <i>__vector unsigned short </i>to<i> __vector unsigned int </i>data
  conversion<i>.</i></span></p>
  <p class=MsoNormal style='margin-left:108.0pt;text-indent:-97.3pt'><span
  lang=EN-US>Line
  26&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  Defines the vector <i>vzero</i> used in data conversion operations for
  padding the lower two bytes with “0”.</span></p>
  <p class=MsoNormal style='margin-left:107.85pt;text-indent:-97.25pt'><span
  lang=EN-US>Lines 31 &amp;
  35&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Using the <b>vec_perm()</b>
  function, cast __<i>vector unsigned short</i> data values to <i>__vector
  unsigned int</i> data elements.</span></p>
  <p class=MsoNormal style='margin-left:108.0pt;text-indent:-97.3pt'><span
  lang=EN-US>Lines 32 &amp;
  36&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Using the <b>vec_ctf()
  </b>function, convert <i>__vector unsigned int</i> data values into <i>__vector
  float</i> data values. </span></p>
  <p class=MsoNormal style='margin-left:108.0pt;text-indent:-97.3pt'><span
  lang=EN-US>Lines 33 &amp;
  37&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Used to multiply <i>__vector
  float</i> data by 0.1.</span></p>
  <p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2 style='text-indent:-49.6pt'><a name="_Ref149404206"></a><a
name="_Toc188185535"></a><a name="_Toc151197862"></a><a name="_Toc151778749"></a><a
name="_Ref149404249"></a><span lang=EN-US>2.8</span><span lang=EN-US
style='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US>Exercise (2-3): Absolute Value Calculation Program</span></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>Here is a review
question about what we’ve learned in Section 2.5.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse'>
 <tr>
  <td width=693 valign=top style='width:520.1pt;border:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal><span style='font-family:"ＭＳ 明朝"'>【</span><span
  lang=EN-US>Question</span><span style='font-family:"ＭＳ 明朝"'>】</span></p>
  <p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>Practice
  Program (2-3) shown below is used to obtain the absolute values for 16 real
  numbers defined in a scalar array. Rewrite this program so that it can
  perform SIMD operations.</span></p>
  <p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>As to the 16
  signed numbers contained as array elements, this program checks whether they are
  positive or negative and inverts the negative ones.&nbsp; </span></p>
  <p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>Input data is
  provided in the form of a 16-element scalar array <i>in</i>. The absolute
  value of each element is stored as output data in the scalar array <i>out</i>.</span></p>
  <p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 width=693
 style='width:520.1pt;border-collapse:collapse'>
 <tr>
  <td width=693 valign=top style='width:520.1pt;border:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal><span style='font-family:"ＭＳ 明朝"'>【</span><span
  lang=EN-US>Practice Program (2-3)</span><span style='font-family:"ＭＳ 明朝"'>】</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;1 #include
  &lt;stdio.h&gt;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;2 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;3 #define
  SIZE&nbsp;&nbsp;&nbsp; (16)</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;4 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;5 float in[SIZE] =
  {&nbsp; 1,&nbsp; -2,&nbsp; 3,&nbsp; -4,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  5,&nbsp; -6,&nbsp; 7,&nbsp; -8,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  9, -10, 11, -12,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  13, -14, 15, -16 };</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;9 float out[SIZE];</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>10 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>11 int main(int argc, char
  **argv)</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>12 {</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>13&nbsp;&nbsp;&nbsp;&nbsp;
  int i;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>14 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>15&nbsp;&nbsp;&nbsp;&nbsp;
  for (i = 0; i &lt; SIZE; i++) {</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>16&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  if (in[i] &gt; 0) {</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>17&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  out[i] = in[i];</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>18&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  } else {</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>19&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  out[i] = in[i] * -1;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>20&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  }</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>21&nbsp;&nbsp;&nbsp;&nbsp;
  }</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>22 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>23&nbsp;&nbsp;&nbsp;&nbsp;
  for (i = 0; i &lt; SIZE; i++) {</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>24&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  printf(&quot;out[%02d]=%0.0f¥n&quot;, i, out[i]);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>25&nbsp;&nbsp;&nbsp;&nbsp;
  }</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>26 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>27&nbsp;&nbsp;&nbsp;&nbsp;
  return 0;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>28 }</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal align=right style='text-align:right;layout-grid-mode:char;
  word-break:break-all'><span lang=EN-US><a href="src/practice2_3_q/">Click
  here for the source code for Practice Program (2-3)</a></span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse'>
 <tr>
  <td width=693 valign=top style='width:520.1pt;border:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal><span style='font-family:"ＭＳ 明朝"'>【</span><span
  lang=EN-US>Strategy to Obtain the Answer</span><span style='font-family:"ＭＳ 明朝"'>】</span></p>
  <p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>
  <p class=MsoNormal><span style='font-family:"ＭＳ 明朝"'>　</span><span
  lang=EN-US>As explained in Section 2.5, the first priority must be given to
  the elimination of conditional branching that negatively affects the
  efficiency of SIMD operations. </span></p>
  <p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>A built-in
  function <b>vec_abs()</b> is available for absolute value calculations. </span></p>
  <p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>However, please
  try to write your program without using this function.&nbsp; </span></p>
  <p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>A model solution
is provided below, together with brief explanations of the program and the
source code.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse'>
 <tr>
  <td width=693 valign=top style='width:520.1pt;border:solid windowtext 1.0pt;
  background:#CCFFFF;padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal style='layout-grid-mode:char'><span style='font-family:
  "ＭＳ 明朝"'>【</span><span lang=EN-US>Solution Program (2-3)</span><span
  style='font-family:"ＭＳ 明朝"'>】</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;1 #include
  &lt;stdio.h&gt;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;2 #include
  &lt;altivec.h&gt;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;3 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;4 #define
  SIZE&nbsp;&nbsp;&nbsp; (16)</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;5 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;6 float in[SIZE]
  __attribute__((aligned(16))) = {&nbsp; 1,&nbsp; -2,&nbsp; 3,&nbsp; -4,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  5,&nbsp; -6,&nbsp; 7,&nbsp; -8,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9,
  -10, 11, -12,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;9&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  13, -14, 15, -16 };</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>10 float out[SIZE]
  __attribute__((aligned(16)));</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>11 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>12 int main(int argc, char
  **argv)</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>13 {</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>14&nbsp;&nbsp;&nbsp;&nbsp;
  int i;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>15 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>16&nbsp;&nbsp;&nbsp;&nbsp;
  __vector float *vin&nbsp; = (__vector float *) in;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>17&nbsp;&nbsp;&nbsp;&nbsp; __vector
  float *vout = (__vector float *) out;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>18&nbsp;&nbsp;&nbsp;&nbsp;
  __vector float vin_negative;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>19&nbsp;&nbsp;&nbsp;&nbsp;
  __vector unsigned int vpat;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>20 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>21&nbsp;&nbsp;&nbsp;&nbsp;
  __vector float vzero&nbsp; = (__vector float) {&nbsp; 0.0f,&nbsp; 0.0f,&nbsp;
  0.0f,&nbsp; 0.0f };</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>22&nbsp;&nbsp;&nbsp;&nbsp;
  __vector float vminus = (__vector float) { -1.0f, -1.0f, -1.0f, -1.0f };</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>23 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>24&nbsp;&nbsp;&nbsp;&nbsp;
  for (i = 0; i &lt; SIZE/4; i++) {</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>25&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  vpat = vec_cmpgt(vin[i], vzero);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>26&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  vin_negative = vec_madd(vin[i], vminus, vzero);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>27&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  vout[i] = vec_sel(vin_negative, vin[i], vpat);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>28&nbsp;&nbsp;&nbsp;&nbsp;
  }</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>29 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>30&nbsp;&nbsp;&nbsp;&nbsp; for
  (i = 0; i &lt; SIZE; i++) {</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>31&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  printf(&quot;out[%02d]=%0.0f¥n&quot;, i, out[i]);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>32&nbsp;&nbsp;&nbsp;&nbsp;
  }</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>33 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>34&nbsp;&nbsp;&nbsp;&nbsp;
  return 0;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>35 }</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal align=right style='text-align:right;layout-grid-mode:char;
  word-break:break-all'><span lang=EN-US><a href="src/practice2_3_a/">Click
  here for the source code for Solution Program (2-3)</a></span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse'>
 <tr>
  <td width=693 valign=top style='width:520.1pt;border:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal><span style='font-family:"ＭＳ 明朝"'>【</span><span
  lang=EN-US>Program Description</span><span style='font-family:"ＭＳ 明朝"'>】</span></p>
  <p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>This program
  is an applied example of Sample Program (2-3). </span></p>
  <p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>With each
  value contained in the input array <i>vin</i>, positive/negative detection is
  performed and the detected result is stored in <i>vpat.</i> Next, the
  sign-inverted value <i>vin_negative </i>is calculated and last of all, selection
  between the <i>vin</i> and <i>vin_negative </i>array elements is performed by
  the <b>vec_sel() </b>function based on which element <i>vpat </i>points to<i>.</i></span></p>
  <p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>The source
  code used in the above solution program is as follows.</span></p>
  <p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>
  <p class=MsoNormal style='margin-left:108.0pt;text-indent:-97.3pt'><span
  lang=EN-US>Lines 16</span><span style='font-family:"ＭＳ 明朝"'>〜</span><span
  lang=EN-US>17&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  Used to enable scalar to vector pointer cast, making it possible to refer to
  scalar&nbsp; arrays <i>in</i> and <i>out </i>in an equivalent vector form.</span></p>
  <p class=MsoNormal style='margin-left:108.0pt;text-indent:-97.3pt'><span
  lang=EN-US>Lines 18</span><span style='font-family:"ＭＳ 明朝"'>〜</span><span
  lang=EN-US>22&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  Used to define the vector variable <i>vin_negative</i> to enable sign
  inversion.</span></p>
  <p class=MsoNormal style='margin-left:108.0pt;text-indent:-97.3pt'><span
  lang=EN-US>Line
  25&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  As to each element in <i>vin</i>, determines whether it is greater than “0”
  or not, using the <b>vec_cmpgt() </b>function.</span></p>
  <p class=MsoNormal style='margin-left:108.0pt;text-indent:-97.3pt'><span
  lang=EN-US>Line
  26&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  Used to calculate the <i>vin_negative</i> value (<i>vin </i>multiplied by
  -1).</span></p>
  <p class=MsoNormal style='margin-left:108.0pt;text-indent:-97.3pt'><span
  lang=EN-US>Line
  27&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  Using the <b>vec_sel()</b> function, selects absolute values (positive
  values) only and stores them in the output data array <i>out.</i> </span></p>
  <p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2 style='text-indent:-49.6pt'><a name="_Toc148010402"></a><a
name="_Toc188185536"></a><a name="_Toc151778750"></a><a name="_Ref149404256"></a><a
name="_Ref149404211"></a><a name="_Toc148010745"></a><span lang=EN-US>2.9</span><span
lang=EN-US style='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US>Exercise (2-4): Grayscale Conversion Program</span></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>This program is
included so that you can test your comprehension of the information contained
in Chapter 2.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse'>
 <tr>
  <td width=693 valign=top style='width:520.1pt;border:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal><span style='font-family:"ＭＳ 明朝"'>【</span><span
  lang=EN-US>Question</span><span style='font-family:"ＭＳ 明朝"'>】</span></p>
  <p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>Practice
  Program (2-4) shows a code snippet taken from a program used to convert color
  images into grayscale images. More precisely, it displays the <b>rgb2y()</b>
  function that undertakes grayscale conversion. </span></p>
  <p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>Rewrite this
  function so that it can perform SIMD operations.</span></p>
  <p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>Grayscale
  conversion involves extraction of brightness data Y from each pixel’s RGB
  values to make it possible to render images composed of shades of gray. The
  formula used for brightness calculation is shown below.</span></p>
  <p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>
  <p class=MsoNormal align=center style='text-align:center'><span lang=EN-US>(Brightness
  calculation formula)</span><span style='font-family:"ＭＳ 明朝"'>　</span><i><span
  lang=EN-US>f<sub>Y</sub></span></i><span lang=EN-US>(<i>R</i>, <i>G</i>, <i>B</i>)
  </span><span style='font-family:"ＭＳ 明朝"'>＝</span><span lang=EN-US> R x
  0.29891 + G x 0.58661 + B x 0.11448</span></p>
  <p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>
  <p class=MsoNormal align=center style='text-align:center;page-break-after:
  avoid'><span lang=EN-US><img border=0 width=400 height=157
  src="CellProgrammingTutorial.files/image031.jpg"></span></p>
  <p class=MsoCaption align=center style='text-align:center'><span lang=EN-US>Fig.
  2.24: Grayscale Conversion</span></p>
  <p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>The first and
  second arguments<i> src</i> and <i>dst</i> of the <b>rgb2y()</b> function
  hold the values of the pointers to the input buffer (color image) and the
  output buffer (grayscale image) respectively. The number of pixels to be
  processed is passed to the third argument <i>num</i>.</span></p>
  <p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>The input data
  to be passed to the <b>rgb2y() </b>function is configured as shown in Fig.
  2.25 (a). After going through the grayscale conversion process, the data is
  output in the format shown in Fig. 2.25 (b). An 8-bit unsigned integer is
  stored in each element of both input and output. </span></p>
  <p class=MsoNormal align=center style='text-align:center;page-break-after:
  avoid'><span lang=EN-US><img border=0 width=477 height=136
  src="CellProgrammingTutorial.files/image032.jpg"></span></p>
  <p class=MsoCaption align=center style='text-align:center'><a
  name="_Ref151766381"><span lang=EN-US>Fig. </span></a><span lang=EN-US>2.25:
  Data Format</span></p>
  <p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>
  <p class=MsoNormal style='margin-left:5.25pt;text-indent:12.7pt'><span
  lang=EN-US>In addition, the value of each product obtained is rounded at the
  maximum value of 255 in order to prevent the RGB value overflow that may be
  caused by floating-point calculation errors. </span></p>
  <p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse'>
 <tr>
  <td width=693 valign=top style='width:520.1pt;border:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal><span style='font-family:"ＭＳ 明朝"'>【</span><span
  lang=EN-US>Practice Program (2-4)</span><span style='font-family:"ＭＳ 明朝"'>】</span><span
  lang=EN-US>(Partial Excerpt)</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;1 #include
  &lt;stdio.h&gt;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;2 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;3 void rgb2y(unsigned
  char *src, unsigned char *dst, int num)</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;4 {</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;
  int i;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;6&nbsp;&nbsp;&nbsp;&nbsp;
  float r, g, b, y;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;
  float rconst = 0.29891f;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;
  float gconst = 0.58661f;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;9&nbsp;&nbsp;&nbsp;&nbsp;
  float bconst = 0.11448f;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>10&nbsp;&nbsp;&nbsp;&nbsp;
  unsigned int max = 255;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>11 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>12&nbsp;&nbsp;&nbsp;&nbsp;
  for (i = 0; i &lt; num; i++) {</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>13&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  r = (float) src[i * 4];</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>14&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  g = (float) src[i * 4 + 1];</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>15&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  b = (float) src[i * 4 + 2];</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>16 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>17&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  y = r * rconst + g * gconst + b * bconst;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>18 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>19&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  if (y &gt; max) {</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>20&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  y = max;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>21&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  }</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>22 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>23&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  dst[i * 4] = dst[i * 4 + 1] = dst[i * 4 + 2] = (unsigned char) y;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>24&nbsp;&nbsp;&nbsp;&nbsp;
  }</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>25 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>26&nbsp;&nbsp;&nbsp;&nbsp;
  return;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>27 }</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal align=right style='text-align:right;layout-grid-mode:char;
  word-break:break-all'><span lang=EN-US><a href="src/practice2_4_q/">Click
  here for the source code for Practice Program (2-4)</a></span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse'>
 <tr>
  <td width=693 valign=top style='width:520.1pt;border:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal><span style='font-family:"ＭＳ 明朝"'>【</span><span
  lang=EN-US>Strategy to Obtain the Answer</span><span style='font-family:"ＭＳ 明朝"'>】</span></p>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>This program
  involves all the important aspects of programming covered by previously
  introduced sample programs and practice programs. Brightness calculation not
  only calls for the conversion from <i>unsigned char</i> RGB values to <i>float
  </i>data but also requires floating-point calculations. In addition,
  elimination of conditional branches is necessary when using SIMD operations
  to round off floating-point calculation errors. </span></p>
  <p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>With all this
  in mind, proceed as follows to create a solution program. </span></p>
  <p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>
  <p class=MsoNormal style='margin-left:54.0pt;text-indent:-54.0pt'><span
  lang=EN-US>(1)</span><span lang=EN-US style='font-size:7.0pt;font-family:
  "Times New Roman"'>&nbsp;&nbsp; </span><span lang=EN-US>For the convenience
  of SIMD operations, realign color data in groups of R, G and B elements.</span></p>
  <p class=MsoNormal style='margin-left:54.0pt;text-indent:-54.0pt'><span
  lang=EN-US>(2)</span><span lang=EN-US style='font-size:7.0pt;font-family:
  "Times New Roman"'>&nbsp;&nbsp; </span><span lang=EN-US>Perform __<i>vector
  unsigned char</i> to <i>__vector float</i> conversion on the realigned data
  in order to allow floating-point calculations for brightness data. You have already
  experienced this conversion of data type in Practice Program (2-2).</span></p>
  <p class=MsoNormal style='margin-left:54.0pt;text-indent:-54.0pt'><span
  lang=EN-US>(3)</span><span lang=EN-US style='font-size:7.0pt;font-family:
  "Times New Roman"'>&nbsp;&nbsp; </span><span lang=EN-US>Brightness values
  obtained as the result of calculation are output to the output buffer in the
  form of { Y, Y, Y, 0 }.</span></p>
  <p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>
  <p class=MsoNormal align=center style='text-align:center;page-break-after:
  avoid'><span lang=EN-US><img border=0 width=622 height=361
  src="CellProgrammingTutorial.files/image033.jpg"></span></p>
  <p class=MsoCaption align=center style='text-align:center'><span lang=EN-US>Fig.
  2.26: RGB to Grayscale Conversion</span></p>
  <p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:5.25pt;text-indent:5.25pt'><span
lang=EN-US>A model solution is provided below, together with brief explanations
of the program and the source code.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 width=693
 style='width:520.1pt;border-collapse:collapse'>
 <tr>
  <td width=693 valign=top style='width:520.1pt;border:solid windowtext 1.0pt;
  background:#CCFFFF;padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal style='layout-grid-mode:char'><span style='font-family:
  "ＭＳ 明朝"'>【</span><span lang=EN-US>Solution Program (2-4)</span><span
  style='font-family:"ＭＳ 明朝"'>】</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;1 #include
  &lt;stdio.h&gt;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;2 #include
  &lt;altivec.h&gt;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;3 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;4 void rgb2y(unsigned
  char *src, unsigned char *dst, int num)</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;5 {</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;6&nbsp;&nbsp;&nbsp;&nbsp;
  int i;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;7 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;
  __vector unsigned char *vsrc = (__vector unsigned char *) src;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;9&nbsp;&nbsp;&nbsp;&nbsp;
  __vector unsigned char *vdst = (__vector unsigned char *) dst;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>10 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>11&nbsp;&nbsp;&nbsp;&nbsp;
  __vector unsigned int vr, vg, vb, vy, vpat;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>12&nbsp;&nbsp;&nbsp;&nbsp;
  __vector float vfr, vfg, vfb, vfy;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>13 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>14&nbsp;&nbsp;&nbsp;&nbsp;
  __vector float vrconst = (__vector float) { 0.29891f, 0.29891f, 0.29891f,
  0.29891f };</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>15&nbsp;&nbsp;&nbsp;&nbsp;
  __vector float vgconst = (__vector float) { 0.58661f, 0.58661f, 0.58661f,
  0.58661f };</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>16&nbsp;&nbsp;&nbsp;&nbsp;
  __vector float vbconst = (__vector float) { 0.11448f, 0.11448f, 0.11448f,
  0.11448f };</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>17&nbsp;&nbsp;&nbsp;&nbsp;
  __vector float vfzero&nbsp; = (__vector float) { 0.0f, 0.0f, 0.0f, 0.0f };</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>18&nbsp;&nbsp;&nbsp;&nbsp;
  __vector unsigned int vmax = (__vector unsigned int) { 255, 255, 255, 255 };</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>19 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>20&nbsp;&nbsp;&nbsp;&nbsp;
  __vector unsigned char vpatr = (__vector unsigned char) { 0x10, 0x10, 0x10,
  0x00,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>21&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  0x10, 0x10, 0x10, 0x04,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>22&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  0x10, 0x10, 0x10, 0x08,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>23&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  0x10, 0x10, 0x10, 0x0c };</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>24&nbsp;&nbsp;&nbsp;&nbsp;
  __vector unsigned char vpatg = (__vector unsigned char) { 0x10, 0x10, 0x10,
  0x01,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>25&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  0x10, 0x10, 0x10, 0x05,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>26&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  0x10, 0x10, 0x10, 0x09,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>27&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  0x10, 0x10, 0x10, 0x0d };</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>28&nbsp;&nbsp;&nbsp;&nbsp;
  __vector unsigned char vpatb = (__vector unsigned char) { 0x10, 0x10, 0x10,
  0x02,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>29&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  0x10, 0x10, 0x10, 0x06,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>30&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  0x10, 0x10, 0x10, 0x0a,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>31&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0x10,
  0x10, 0x10, 0x0e };</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>32&nbsp;&nbsp;&nbsp;&nbsp;
  __vector unsigned char vpaty = (__vector unsigned char) { 0x03, 0x03, 0x03,
  0x10,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>33&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  0x07, 0x07, 0x07, 0x10,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>34&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0x0b,
  0x0b, 0x0b, 0x10,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>35&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  0x0f, 0x0f, 0x0f, 0x10 };</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>36&nbsp;&nbsp;&nbsp;&nbsp; __vector
  unsigned char vzero = (__vector unsigned char) { 0, 0, 0, 0, 0, 0, 0, 0,</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>37&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0,
  0, 0, 0, 0, 0, 0, 0 };</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>38 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>39&nbsp;&nbsp;&nbsp;&nbsp;
  for (i = 0; i &lt; num/4; i++) {</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>40&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  vr = (__vector unsigned int) vec_perm(vsrc[i], vzero, vpatr);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>41&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  vg = (__vector unsigned int) vec_perm(vsrc[i], vzero, vpatg);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>42&nbsp;&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vb = (__vector unsigned int)
  vec_perm(vsrc[i], vzero, vpatb);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>43 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>44&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  vfr = vec_ctf(vr, 0);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>45&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  vfg = vec_ctf(vg, 0);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>46&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  vfb = vec_ctf(vb, 0);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>47 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>48&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  vfy = vec_madd(vfr, vrconst, vfzero);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>49&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  vfy = vec_madd(vfg, vgconst, vfy);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>50&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  vfy = vec_madd(vfb, vbconst, vfy);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>51 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>52&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  vy = vec_ctu(vfy, 0);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>53 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>54&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  vpat = vec_cmpgt(vy, vmax);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>55&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  vy = vec_sel(vy, vmax, vpat);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>56 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>57&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  vdst[i] = (__vector unsigned char) vec_perm(vy, (__vector unsigned int)
  vzero, vpaty);</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>58&nbsp;&nbsp;&nbsp;&nbsp;
  }</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>59 </span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>60&nbsp;&nbsp;&nbsp;&nbsp;
  return;</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>61 }</span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span lang=EN-US
  style='font-size:9.0pt;font-family:"Courier New"'>&nbsp;</span></p>
  <p class=MsoNormal align=right style='text-align:right;word-break:break-all'><span
  lang=EN-US><a href="src/practice2_4_a/">Click here for the source code for
  Solution Program (2-4)</a></span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse'>
 <tr>
  <td width=693 valign=top style='width:520.1pt;border:solid windowtext 1.0pt;
  padding:0mm 5.4pt 0mm 5.4pt'>
  <p class=MsoNormal><span style='font-family:"ＭＳ 明朝"'>【</span><span
  lang=EN-US>Program Description</span><span style='font-family:"ＭＳ 明朝"'>】</span></p>
  <p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>Calculation of
  brightness Y is performed in nearly the same way as the floating-point
  calculation explained for Practice Program (2-2). Conversion from <i>__vector
  unsigned char</i> to <i>__vector float</i> data is performed in two steps:
  first, from __<i>vector unsigned char</i> to __<i>vector unsigned int</i>,
  and then to <i>__vector float</i>. </span></p>
  <p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>For the first
  part of the conversion, the <b>vec_perm() </b>function is used. The second
  part of the conversion is enabled by the use of the <b>vec_ctf()</b>
  function. Thereafter, the <b>vec_madd()</b> function iterates calculations
  based on the multiplication formula explained in the question part of this
  section.</span></p>
  <p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>
  <p class=MsoNormal align=left style='margin-left:5.25pt;text-align:left;
  text-indent:5.25pt'><span lang=EN-US style='color:black'>Upon completion of
  multiplications, the <b>vec_ctu()</b> function converts floating-point
  numbers into integer values. We only touched upon this function in </span><span
  lang=EN-US>Table 2.4<span style='color:black'>, but we hope you still
  remember it.</span></span></p>
  <p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>Last of all,
  each calculated result is rounded off at the maximum value of 255 by
  employing the method to eliminate conditional branches explained for Practice
  Program (2-3). </span></p>
  <p class=MsoNormal align=left style='text-align:left'><span lang=EN-US
  style='color:black'>&nbsp;</span></p>
  <p class=MsoNormal align=center style='text-align:center;text-indent:10.5pt'><span
  lang=EN-US><img border=0 width=650 height=606
  src="CellProgrammingTutorial.files/image034.jpg"></span></p>
  <p class=MsoCaption align=center style='text-align:center'><span lang=EN-US>&nbsp;</span></p>
  <p class=MsoCaption align=center style='text-align:center'><span lang=EN-US>Fig.
  2.27: Grayscale Conversion Processing by SIMD Operations</span></p>
  <p class=MsoNormal><span lang=EN-US style='color:black'>&nbsp;</span></p>
  <p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>The source
  code used in the above solution program is as follows.</span></p>
  <p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>
  <p class=MsoNormal style='margin-left:108.0pt;text-indent:-97.3pt'><span
  lang=EN-US>Lines 5</span><span style='font-family:"ＭＳ 明朝"'>〜</span><span
  lang=EN-US>6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  Used to enable scalar to vector pointer cast, making it possible to refer to
  scalar&nbsp; arrays <i>src </i>and <i>dst</i> in an equivalent vector form.</span></p>
  <p class=MsoNormal style='margin-left:108.0pt;text-indent:-97.3pt'><span
  lang=EN-US>Lines 8</span><span style='font-family:"ＭＳ 明朝"'>〜</span><span
  lang=EN-US>9&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  Vector variables used to store RGB data for SIMD operations.</span></p>
  <p class=MsoNormal style='margin-left:108.0pt;text-indent:-97.3pt'><span
  lang=EN-US>Lines 11</span><span style='font-family:"ＭＳ 明朝"'>〜</span><span
  lang=EN-US>15&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  Vector constants for calculating brightness Y.</span></p>
  <p class=MsoNormal style='margin-left:108.0pt;text-indent:-97.3pt'><span
  lang=EN-US>Lines 17</span><span style='font-family:"ＭＳ 明朝"'>〜</span><span
  lang=EN-US>28&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  Realignment patterns necessary to generate vectors realigned into R, G and B element
  groups. </span></p>
  <p class=MsoNormal style='margin-left:108.0pt;text-indent:-97.3pt'><span
  lang=EN-US>Lines 29</span><span style='font-family:"ＭＳ 明朝"'>〜</span><span
  lang=EN-US>34&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  Realignment patterns used to realign brightness data Y in conformity with the
  output data format.</span></p>
  <p class=MsoNormal style='margin-left:108.0pt;text-indent:-97.3pt'><span
  lang=EN-US>Lines 37</span><span style='font-family:"ＭＳ 明朝"'>〜</span><span
  lang=EN-US>39&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  Used to convert input data into vectors grouped in RGB units.</span></p>
  <p class=MsoNormal style='margin-left:108.0pt;text-indent:-97.3pt'><span
  lang=EN-US>Lines 41</span><span style='font-family:"ＭＳ 明朝"'>〜</span><span
  lang=EN-US>43&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  Using the <b>vec_ctf()</b> function, convert RGB data into floating-point
  values.</span></p>
  <p class=MsoNormal style='margin-left:108.0pt;text-indent:-97.3pt'><span
  lang=EN-US>Lines 45</span><span style='font-family:"ＭＳ 明朝"'>〜</span><span
  lang=EN-US>47&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  Used to calculate brightness Y.</span></p>
  <p class=MsoNormal style='margin-left:108.0pt;text-indent:-97.3pt'><span
  lang=EN-US>Line
  49&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  Using the <b>vec_ctu()</b> function, convert brightness data Y into integer
  values.</span></p>
  <p class=MsoNormal style='margin-left:108.0pt;text-indent:-97.3pt'><span
  lang=EN-US>Lines 51</span><span style='font-family:"ＭＳ 明朝"'>〜</span><span
  lang=EN-US>52&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  Using <b>vec_cmpgt()</b> and <b>vec_sel()</b> functions, round off each
  calculated result so that it falls in the range of values that can be
  expressed by an 8-bit unsigned integer.</span></p>
  <p class=MsoNormal style='margin-left:108.0pt;text-indent:-97.3pt'><span
  lang=EN-US>Lines
  54&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  Used to send and store grayscale data in the output buffer <i>dst</i>.</span></p>
  <p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<h2 style='text-indent:-49.6pt'><a name="_Toc151778751"></a><a
name="_Toc188185537"></a><a name="_Toc151197864"></a><span lang=EN-US>2.10</span><span
lang=EN-US style='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US>Chapter Summary</span></h2>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>In summary, this
chapter has covered the following five aspects of SIMD operations.</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:57.0pt;text-indent:-57.0pt'><span
lang=EN-US>(1)</span><span lang=EN-US style='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US>SIMD Operation Overview</span></p>

<p class=MsoNormal style='margin-left:57.0pt;text-indent:-57.0pt'><span
lang=EN-US>(2)</span><span lang=EN-US style='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US>Data Used in SIMD Programming</span></p>

<p class=MsoNormal style='margin-left:57.0pt;text-indent:-57.0pt'><span
lang=EN-US>(3)</span><span lang=EN-US style='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US>Rudimentary SIMD Operations</span></p>

<p class=MsoNormal style='margin-left:57.0pt;text-indent:-57.0pt'><span
lang=EN-US>(4)</span><span lang=EN-US style='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US>Generation of SIMD-Ready Vectors</span></p>

<p class=MsoNormal style='margin-left:57.0pt;text-indent:-57.0pt'><span
lang=EN-US>(5)</span><span lang=EN-US style='font-size:7.0pt;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US>Elimination of Conditional Branches</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>Major Points of
Discussion in Section 2.1: SIMD Operation Overview</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>The basic
principle of SIMD operations lies, as stated repeatedly, in processing multiple
data with a single instruction. Despite this advantage, however, SIMD
operations can only be applied to certain predefined processing patterns. </span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>Major Points of
Discussion in Section 2.2: Data Used in SIMD Programming</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>With the Cell,
SIMD operations use 128-bit (16-byte) fixed-length vectors made up of 2 to 16
elements according to the data type. SIMD operations can utilize both scalars
and vectors by performing a pointer cast between the two types of data.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>Major Points of
Discussion in Section 2.3: Rudimentary SIMD Operations</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>SIMD operations
make use of the built-in functions of the VMX instruction set to perform
arithmetic operations. </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>Major points of
Discussion in Section 2.4: Generation of SIMD-Ready Vectors</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>The data
structure of the inputs to application programs are not always suited for SIMD
operations. This section has therefore been provided to explain how to convert
such inputs into vectors convenient for SIMD operations. </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>Major Points of
Discussion in Section 2.5: Elimination of Conditional Branches</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>Efficiency of
SIMD operations is significantly affected if conditional branches were to be
used in the same way as in scalar operations. SIMD operations therefore employ
a second method to obtain the same result as conditional branching. </span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='text-indent:10.5pt'><span lang=EN-US>Basics of SIMD
operations have been explained in this chapter. We hope that the information
presented, as well as the practice programs you have worked on, was useful and
helpful. Now then, let’s proceed to the next chapter on developing programs for
SPE processors. </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

</div>

</body>

</html>
